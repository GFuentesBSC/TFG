Module(body=[
  ImportFrom(
    module='__future__',
    names=[alias(
      name='print_function',
      asname=None)],
    level=0),
  ImportFrom(
    module='tensorflow.keras.models',
    names=[
      alias(
        name='Sequential',
        asname=None),
      alias(
        name='Model',
        asname=None)],
    level=0),
  ImportFrom(
    module='tensorflow.keras.layers',
    names=[alias(
      name='Embedding',
      asname=None)],
    level=0),
  ImportFrom(
    module='tensorflow.keras.layers',
    names=[
      alias(
        name='Input',
        asname=None),
      alias(
        name='Activation',
        asname=None),
      alias(
        name='Dense',
        asname=None),
      alias(
        name='Permute',
        asname=None),
      alias(
        name='Dropout',
        asname=None)],
    level=0),
  ImportFrom(
    module='tensorflow.keras.layers',
    names=[
      alias(
        name='add',
        asname=None),
      alias(
        name='dot',
        asname=None),
      alias(
        name='concatenate',
        asname=None)],
    level=0),
  ImportFrom(
    module='tensorflow.keras.layers',
    names=[alias(
      name='LSTM',
      asname=None)],
    level=0),
  ImportFrom(
    module='tensorflow.keras.utils',
    names=[alias(
      name='get_file',
      asname=None)],
    level=0),
  ImportFrom(
    module='tensorflow.keras.preprocessing.sequence',
    names=[alias(
      name='pad_sequences',
      asname=None)],
    level=0),
  ImportFrom(
    module='functools',
    names=[alias(
      name='reduce',
      asname=None)],
    level=0),
  Import(names=[alias(
    name='tarfile',
    asname=None)]),
  Import(names=[alias(
    name='numpy',
    asname='np')]),
  Import(names=[alias(
    name='re',
    asname=None)]),
  FunctionDef(
    name='tokenize',
    args=arguments(
      args=[arg(
        arg='sent',
        annotation=None)],
      vararg=None,
      kwonlyargs=[],
      kw_defaults=[],
      kwarg=None,
      defaults=[]),
    body=[
      Expr(value=Str(s="Return the tokens of a sentence including punctuation.\n    >>> tokenize('Bob dropped the apple. Where is the apple?')\n    ['Bob', 'dropped', 'the', 'apple', '.', 'Where', 'is', 'the', 'apple', '?']\n    ")),
      Return(value=ListComp(
        elt=Call(
          func=Attribute(
            value=Name(
              id='x',
              ctx=Load()),
            attr='strip',
            ctx=Load()),
          args=[],
          keywords=[]),
        generators=[comprehension(
          target=Name(
            id='x',
            ctx=Store()),
          iter=Call(
            func=Attribute(
              value=Name(
                id='re',
                ctx=Load()),
              attr='split',
              ctx=Load()),
            args=[
              Str(s='(\\W+)?'),
              Name(
                id='sent',
                ctx=Load())],
            keywords=[]),
          ifs=[Call(
            func=Attribute(
              value=Name(
                id='x',
                ctx=Load()),
              attr='strip',
              ctx=Load()),
            args=[],
            keywords=[])],
          is_async=0)]))],
    decorator_list=[],
    returns=None),
  FunctionDef(
    name='parse_stories',
    args=arguments(
      args=[
        arg(
          arg='lines',
          annotation=None),
        arg(
          arg='only_supporting',
          annotation=None)],
      vararg=None,
      kwonlyargs=[],
      kw_defaults=[],
      kwarg=None,
      defaults=[NameConstant(value=False)]),
    body=[
      Expr(value=Str(s='Parse stories provided in the bAbi tasks format\n    If only_supporting is true, only the sentences\n    that support the answer are kept.\n    ')),
      Assign(
        targets=[Name(
          id='data',
          ctx=Store())],
        value=List(
          elts=[],
          ctx=Load())),
      Assign(
        targets=[Name(
          id='story',
          ctx=Store())],
        value=List(
          elts=[],
          ctx=Load())),
      For(
        target=Name(
          id='line',
          ctx=Store()),
        iter=Name(
          id='lines',
          ctx=Load()),
        body=[
          Assign(
            targets=[Name(
              id='line',
              ctx=Store())],
            value=Call(
              func=Attribute(
                value=Call(
                  func=Attribute(
                    value=Name(
                      id='line',
                      ctx=Load()),
                    attr='decode',
                    ctx=Load()),
                  args=[Str(s='utf-8')],
                  keywords=[]),
                attr='strip',
                ctx=Load()),
              args=[],
              keywords=[])),
          Assign(
            targets=[Tuple(
              elts=[
                Name(
                  id='nid',
                  ctx=Store()),
                Name(
                  id='line',
                  ctx=Store())],
              ctx=Store())],
            value=Call(
              func=Attribute(
                value=Name(
                  id='line',
                  ctx=Load()),
                attr='split',
                ctx=Load()),
              args=[
                Str(s=' '),
                Num(n=1)],
              keywords=[])),
          Assign(
            targets=[Name(
              id='nid',
              ctx=Store())],
            value=Call(
              func=Name(
                id='int',
                ctx=Load()),
              args=[Name(
                id='nid',
                ctx=Load())],
              keywords=[])),
          If(
            test=Compare(
              left=Name(
                id='nid',
                ctx=Load()),
              ops=[Eq()],
              comparators=[Num(n=1)]),
            body=[Assign(
              targets=[Name(
                id='story',
                ctx=Store())],
              value=List(
                elts=[],
                ctx=Load()))],
            orelse=[]),
          If(
            test=Compare(
              left=Str(s='\t'),
              ops=[In()],
              comparators=[Name(
                id='line',
                ctx=Load())]),
            body=[
              Assign(
                targets=[Tuple(
                  elts=[
                    Name(
                      id='q',
                      ctx=Store()),
                    Name(
                      id='a',
                      ctx=Store()),
                    Name(
                      id='supporting',
                      ctx=Store())],
                  ctx=Store())],
                value=Call(
                  func=Attribute(
                    value=Name(
                      id='line',
                      ctx=Load()),
                    attr='split',
                    ctx=Load()),
                  args=[Str(s='\t')],
                  keywords=[])),
              Assign(
                targets=[Name(
                  id='q',
                  ctx=Store())],
                value=Call(
                  func=Name(
                    id='tokenize',
                    ctx=Load()),
                  args=[Name(
                    id='q',
                    ctx=Load())],
                  keywords=[])),
              If(
                test=Name(
                  id='only_supporting',
                  ctx=Load()),
                body=[
                  Assign(
                    targets=[Name(
                      id='supporting',
                      ctx=Store())],
                    value=Call(
                      func=Name(
                        id='map',
                        ctx=Load()),
                      args=[
                        Name(
                          id='int',
                          ctx=Load()),
                        Call(
                          func=Attribute(
                            value=Name(
                              id='supporting',
                              ctx=Load()),
                            attr='split',
                            ctx=Load()),
                          args=[],
                          keywords=[])],
                      keywords=[])),
                  Assign(
                    targets=[Name(
                      id='substory',
                      ctx=Store())],
                    value=ListComp(
                      elt=Subscript(
                        value=Name(
                          id='story',
                          ctx=Load()),
                        slice=Index(value=BinOp(
                          left=Name(
                            id='i',
                            ctx=Load()),
                          op=Sub(),
                          right=Num(n=1))),
                        ctx=Load()),
                      generators=[comprehension(
                        target=Name(
                          id='i',
                          ctx=Store()),
                        iter=Name(
                          id='supporting',
                          ctx=Load()),
                        ifs=[],
                        is_async=0)]))],
                orelse=[Assign(
                  targets=[Name(
                    id='substory',
                    ctx=Store())],
                  value=ListComp(
                    elt=Name(
                      id='x',
                      ctx=Load()),
                    generators=[comprehension(
                      target=Name(
                        id='x',
                        ctx=Store()),
                      iter=Name(
                        id='story',
                        ctx=Load()),
                      ifs=[Name(
                        id='x',
                        ctx=Load())],
                      is_async=0)]))]),
              Expr(value=Call(
                func=Attribute(
                  value=Name(
                    id='data',
                    ctx=Load()),
                  attr='append',
                  ctx=Load()),
                args=[Tuple(
                  elts=[
                    Name(
                      id='substory',
                      ctx=Load()),
                    Name(
                      id='q',
                      ctx=Load()),
                    Name(
                      id='a',
                      ctx=Load())],
                  ctx=Load())],
                keywords=[])),
              Expr(value=Call(
                func=Attribute(
                  value=Name(
                    id='story',
                    ctx=Load()),
                  attr='append',
                  ctx=Load()),
                args=[Str(s='')],
                keywords=[]))],
            orelse=[
              Assign(
                targets=[Name(
                  id='sent',
                  ctx=Store())],
                value=Call(
                  func=Name(
                    id='tokenize',
                    ctx=Load()),
                  args=[Name(
                    id='line',
                    ctx=Load())],
                  keywords=[])),
              Expr(value=Call(
                func=Attribute(
                  value=Name(
                    id='story',
                    ctx=Load()),
                  attr='append',
                  ctx=Load()),
                args=[Name(
                  id='sent',
                  ctx=Load())],
                keywords=[]))])],
        orelse=[]),
      Return(value=Name(
        id='data',
        ctx=Load()))],
    decorator_list=[],
    returns=None),
  FunctionDef(
    name='get_stories',
    args=arguments(
      args=[
        arg(
          arg='f',
          annotation=None),
        arg(
          arg='only_supporting',
          annotation=None),
        arg(
          arg='max_length',
          annotation=None)],
      vararg=None,
      kwonlyargs=[],
      kw_defaults=[],
      kwarg=None,
      defaults=[
        NameConstant(value=False),
        NameConstant(value=None)]),
    body=[
      Expr(value=Str(s='Given a file name, read the file,\n    retrieve the stories,\n    and then convert the sentences into a single story.\n    If max_length is supplied,\n    any stories longer than max_length tokens will be discarded.\n    ')),
      Assign(
        targets=[Name(
          id='data',
          ctx=Store())],
        value=Call(
          func=Name(
            id='parse_stories',
            ctx=Load()),
          args=[Call(
            func=Attribute(
              value=Name(
                id='f',
                ctx=Load()),
              attr='readlines',
              ctx=Load()),
            args=[],
            keywords=[])],
          keywords=[keyword(
            arg='only_supporting',
            value=Name(
              id='only_supporting',
              ctx=Load()))])),
      Assign(
        targets=[Name(
          id='flatten',
          ctx=Store())],
        value=Lambda(
          args=arguments(
            args=[arg(
              arg='data',
              annotation=None)],
            vararg=None,
            kwonlyargs=[],
            kw_defaults=[],
            kwarg=None,
            defaults=[]),
          body=Call(
            func=Name(
              id='reduce',
              ctx=Load()),
            args=[
              Lambda(
                args=arguments(
                  args=[
                    arg(
                      arg='x',
                      annotation=None),
                    arg(
                      arg='y',
                      annotation=None)],
                  vararg=None,
                  kwonlyargs=[],
                  kw_defaults=[],
                  kwarg=None,
                  defaults=[]),
                body=BinOp(
                  left=Name(
                    id='x',
                    ctx=Load()),
                  op=Add(),
                  right=Name(
                    id='y',
                    ctx=Load()))),
              Name(
                id='data',
                ctx=Load())],
            keywords=[]))),
      Assign(
        targets=[Name(
          id='data',
          ctx=Store())],
        value=ListComp(
          elt=Tuple(
            elts=[
              Call(
                func=Name(
                  id='flatten',
                  ctx=Load()),
                args=[Name(
                  id='story',
                  ctx=Load())],
                keywords=[]),
              Name(
                id='q',
                ctx=Load()),
              Name(
                id='answer',
                ctx=Load())],
            ctx=Load()),
          generators=[comprehension(
            target=Tuple(
              elts=[
                Name(
                  id='story',
                  ctx=Store()),
                Name(
                  id='q',
                  ctx=Store()),
                Name(
                  id='answer',
                  ctx=Store())],
              ctx=Store()),
            iter=Name(
              id='data',
              ctx=Load()),
            ifs=[BoolOp(
              op=Or(),
              values=[
                UnaryOp(
                  op=Not(),
                  operand=Name(
                    id='max_length',
                    ctx=Load())),
                Compare(
                  left=Call(
                    func=Name(
                      id='len',
                      ctx=Load()),
                    args=[Call(
                      func=Name(
                        id='flatten',
                        ctx=Load()),
                      args=[Name(
                        id='story',
                        ctx=Load())],
                      keywords=[])],
                    keywords=[]),
                  ops=[Lt()],
                  comparators=[Name(
                    id='max_length',
                    ctx=Load())])])],
            is_async=0)])),
      Return(value=Name(
        id='data',
        ctx=Load()))],
    decorator_list=[],
    returns=None),
  FunctionDef(
    name='vectorize_stories',
    args=arguments(
      args=[arg(
        arg='data',
        annotation=None)],
      vararg=None,
      kwonlyargs=[],
      kw_defaults=[],
      kwarg=None,
      defaults=[]),
    body=[
      Assign(
        targets=[Tuple(
          elts=[
            Name(
              id='inputs',
              ctx=Store()),
            Name(
              id='queries',
              ctx=Store()),
            Name(
              id='answers',
              ctx=Store())],
          ctx=Store())],
        value=Tuple(
          elts=[
            List(
              elts=[],
              ctx=Load()),
            List(
              elts=[],
              ctx=Load()),
            List(
              elts=[],
              ctx=Load())],
          ctx=Load())),
      For(
        target=Tuple(
          elts=[
            Name(
              id='story',
              ctx=Store()),
            Name(
              id='query',
              ctx=Store()),
            Name(
              id='answer',
              ctx=Store())],
          ctx=Store()),
        iter=Name(
          id='data',
          ctx=Load()),
        body=[
          Expr(value=Call(
            func=Attribute(
              value=Name(
                id='inputs',
                ctx=Load()),
              attr='append',
              ctx=Load()),
            args=[ListComp(
              elt=Subscript(
                value=Name(
                  id='word_idx',
                  ctx=Load()),
                slice=Index(value=Name(
                  id='w',
                  ctx=Load())),
                ctx=Load()),
              generators=[comprehension(
                target=Name(
                  id='w',
                  ctx=Store()),
                iter=Name(
                  id='story',
                  ctx=Load()),
                ifs=[],
                is_async=0)])],
            keywords=[])),
          Expr(value=Call(
            func=Attribute(
              value=Name(
                id='queries',
                ctx=Load()),
              attr='append',
              ctx=Load()),
            args=[ListComp(
              elt=Subscript(
                value=Name(
                  id='word_idx',
                  ctx=Load()),
                slice=Index(value=Name(
                  id='w',
                  ctx=Load())),
                ctx=Load()),
              generators=[comprehension(
                target=Name(
                  id='w',
                  ctx=Store()),
                iter=Name(
                  id='query',
                  ctx=Load()),
                ifs=[],
                is_async=0)])],
            keywords=[])),
          Expr(value=Call(
            func=Attribute(
              value=Name(
                id='answers',
                ctx=Load()),
              attr='append',
              ctx=Load()),
            args=[Subscript(
              value=Name(
                id='word_idx',
                ctx=Load()),
              slice=Index(value=Name(
                id='answer',
                ctx=Load())),
              ctx=Load())],
            keywords=[]))],
        orelse=[]),
      Return(value=Tuple(
        elts=[
          Call(
            func=Name(
              id='pad_sequences',
              ctx=Load()),
            args=[Name(
              id='inputs',
              ctx=Load())],
            keywords=[keyword(
              arg='maxlen',
              value=Name(
                id='story_maxlen',
                ctx=Load()))]),
          Call(
            func=Name(
              id='pad_sequences',
              ctx=Load()),
            args=[Name(
              id='queries',
              ctx=Load())],
            keywords=[keyword(
              arg='maxlen',
              value=Name(
                id='query_maxlen',
                ctx=Load()))]),
          Call(
            func=Attribute(
              value=Name(
                id='np',
                ctx=Load()),
              attr='array',
              ctx=Load()),
            args=[Name(
              id='answers',
              ctx=Load())],
            keywords=[])],
        ctx=Load()))],
    decorator_list=[],
    returns=None),
  Try(
    body=[Assign(
      targets=[Name(
        id='path',
        ctx=Store())],
      value=Call(
        func=Name(
          id='get_file',
          ctx=Load()),
        args=[Str(s='babi-tasks-v1-2.tar.gz')],
        keywords=[keyword(
          arg='origin',
          value=Str(s='https://s3.amazonaws.com/text-datasets/babi_tasks_1-20_v1-2.tar.gz'))]))],
    handlers=[ExceptHandler(
      type=None,
      name=None,
      body=[
        Expr(value=Call(
          func=Name(
            id='print',
            ctx=Load()),
          args=[Str(s='Error downloading dataset, please download it manually:\n$ wget http://www.thespermwhale.com/jaseweston/babi/tasks_1-20_v1-2.tar.gz\n$ mv tasks_1-20_v1-2.tar.gz ~/.keras/datasets/babi-tasks-v1-2.tar.gz')],
          keywords=[])),
        Raise(
          exc=None,
          cause=None)])],
    orelse=[],
    finalbody=[]),
  Assign(
    targets=[Name(
      id='challenges',
      ctx=Store())],
    value=Dict(
      keys=[
        Str(s='single_supporting_fact_10k'),
        Str(s='two_supporting_facts_10k')],
      values=[
        Str(s='tasks_1-20_v1-2/en-10k/qa1_single-supporting-fact_{}.txt'),
        Str(s='tasks_1-20_v1-2/en-10k/qa2_two-supporting-facts_{}.txt')])),
  Assign(
    targets=[Name(
      id='challenge_type',
      ctx=Store())],
    value=Str(s='single_supporting_fact_10k')),
  Assign(
    targets=[Name(
      id='challenge',
      ctx=Store())],
    value=Subscript(
      value=Name(
        id='challenges',
        ctx=Load()),
      slice=Index(value=Name(
        id='challenge_type',
        ctx=Load())),
      ctx=Load())),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[
      Str(s='Extracting stories for the challenge:'),
      Name(
        id='challenge_type',
        ctx=Load())],
    keywords=[])),
  With(
    items=[withitem(
      context_expr=Call(
        func=Attribute(
          value=Name(
            id='tarfile',
            ctx=Load()),
          attr='open',
          ctx=Load()),
        args=[Name(
          id='path',
          ctx=Load())],
        keywords=[]),
      optional_vars=Name(
        id='tar',
        ctx=Store()))],
    body=[
      Assign(
        targets=[Name(
          id='train_stories',
          ctx=Store())],
        value=Call(
          func=Name(
            id='get_stories',
            ctx=Load()),
          args=[Call(
            func=Attribute(
              value=Name(
                id='tar',
                ctx=Load()),
              attr='extractfile',
              ctx=Load()),
            args=[Call(
              func=Attribute(
                value=Name(
                  id='challenge',
                  ctx=Load()),
                attr='format',
                ctx=Load()),
              args=[Str(s='train')],
              keywords=[])],
            keywords=[])],
          keywords=[])),
      Assign(
        targets=[Name(
          id='test_stories',
          ctx=Store())],
        value=Call(
          func=Name(
            id='get_stories',
            ctx=Load()),
          args=[Call(
            func=Attribute(
              value=Name(
                id='tar',
                ctx=Load()),
              attr='extractfile',
              ctx=Load()),
            args=[Call(
              func=Attribute(
                value=Name(
                  id='challenge',
                  ctx=Load()),
                attr='format',
                ctx=Load()),
              args=[Str(s='test')],
              keywords=[])],
            keywords=[])],
          keywords=[]))]),
  Assign(
    targets=[Name(
      id='vocab',
      ctx=Store())],
    value=Call(
      func=Name(
        id='set',
        ctx=Load()),
      args=[],
      keywords=[])),
  For(
    target=Tuple(
      elts=[
        Name(
          id='story',
          ctx=Store()),
        Name(
          id='q',
          ctx=Store()),
        Name(
          id='answer',
          ctx=Store())],
      ctx=Store()),
    iter=BinOp(
      left=Name(
        id='train_stories',
        ctx=Load()),
      op=Add(),
      right=Name(
        id='test_stories',
        ctx=Load())),
    body=[AugAssign(
      target=Name(
        id='vocab',
        ctx=Store()),
      op=BitOr(),
      value=Call(
        func=Name(
          id='set',
          ctx=Load()),
        args=[BinOp(
          left=BinOp(
            left=Name(
              id='story',
              ctx=Load()),
            op=Add(),
            right=Name(
              id='q',
              ctx=Load())),
          op=Add(),
          right=List(
            elts=[Name(
              id='answer',
              ctx=Load())],
            ctx=Load()))],
        keywords=[]))],
    orelse=[]),
  Assign(
    targets=[Name(
      id='vocab',
      ctx=Store())],
    value=Call(
      func=Name(
        id='sorted',
        ctx=Load()),
      args=[Name(
        id='vocab',
        ctx=Load())],
      keywords=[])),
  Assign(
    targets=[Name(
      id='vocab_size',
      ctx=Store())],
    value=BinOp(
      left=Call(
        func=Name(
          id='len',
          ctx=Load()),
        args=[Name(
          id='vocab',
          ctx=Load())],
        keywords=[]),
      op=Add(),
      right=Num(n=1))),
  Assign(
    targets=[Name(
      id='story_maxlen',
      ctx=Store())],
    value=Call(
      func=Name(
        id='max',
        ctx=Load()),
      args=[Call(
        func=Name(
          id='map',
          ctx=Load()),
        args=[
          Name(
            id='len',
            ctx=Load()),
          GeneratorExp(
            elt=Name(
              id='x',
              ctx=Load()),
            generators=[comprehension(
              target=Tuple(
                elts=[
                  Name(
                    id='x',
                    ctx=Store()),
                  Name(
                    id='_',
                    ctx=Store()),
                  Name(
                    id='_',
                    ctx=Store())],
                ctx=Store()),
              iter=BinOp(
                left=Name(
                  id='train_stories',
                  ctx=Load()),
                op=Add(),
                right=Name(
                  id='test_stories',
                  ctx=Load())),
              ifs=[],
              is_async=0)])],
        keywords=[])],
      keywords=[])),
  Assign(
    targets=[Name(
      id='query_maxlen',
      ctx=Store())],
    value=Call(
      func=Name(
        id='max',
        ctx=Load()),
      args=[Call(
        func=Name(
          id='map',
          ctx=Load()),
        args=[
          Name(
            id='len',
            ctx=Load()),
          GeneratorExp(
            elt=Name(
              id='x',
              ctx=Load()),
            generators=[comprehension(
              target=Tuple(
                elts=[
                  Name(
                    id='_',
                    ctx=Store()),
                  Name(
                    id='x',
                    ctx=Store()),
                  Name(
                    id='_',
                    ctx=Store())],
                ctx=Store()),
              iter=BinOp(
                left=Name(
                  id='train_stories',
                  ctx=Load()),
                op=Add(),
                right=Name(
                  id='test_stories',
                  ctx=Load())),
              ifs=[],
              is_async=0)])],
        keywords=[])],
      keywords=[])),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[Str(s='-')],
    keywords=[])),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[
      Str(s='Vocab size:'),
      Name(
        id='vocab_size',
        ctx=Load()),
      Str(s='unique words')],
    keywords=[])),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[
      Str(s='Story max length:'),
      Name(
        id='story_maxlen',
        ctx=Load()),
      Str(s='words')],
    keywords=[])),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[
      Str(s='Query max length:'),
      Name(
        id='query_maxlen',
        ctx=Load()),
      Str(s='words')],
    keywords=[])),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[
      Str(s='Number of training stories:'),
      Call(
        func=Name(
          id='len',
          ctx=Load()),
        args=[Name(
          id='train_stories',
          ctx=Load())],
        keywords=[])],
    keywords=[])),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[
      Str(s='Number of test stories:'),
      Call(
        func=Name(
          id='len',
          ctx=Load()),
        args=[Name(
          id='test_stories',
          ctx=Load())],
        keywords=[])],
    keywords=[])),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[Str(s='-')],
    keywords=[])),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[Str(s='Here\'s what a "story" tuple looks like (input, query, answer):')],
    keywords=[])),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[Subscript(
      value=Name(
        id='train_stories',
        ctx=Load()),
      slice=Index(value=Num(n=0)),
      ctx=Load())],
    keywords=[])),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[Str(s='-')],
    keywords=[])),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[Str(s='Vectorizing the word sequences...')],
    keywords=[])),
  Assign(
    targets=[Name(
      id='word_idx',
      ctx=Store())],
    value=Call(
      func=Name(
        id='dict',
        ctx=Load()),
      args=[GeneratorExp(
        elt=Tuple(
          elts=[
            Name(
              id='c',
              ctx=Load()),
            BinOp(
              left=Name(
                id='i',
                ctx=Load()),
              op=Add(),
              right=Num(n=1))],
          ctx=Load()),
        generators=[comprehension(
          target=Tuple(
            elts=[
              Name(
                id='i',
                ctx=Store()),
              Name(
                id='c',
                ctx=Store())],
            ctx=Store()),
          iter=Call(
            func=Name(
              id='enumerate',
              ctx=Load()),
            args=[Name(
              id='vocab',
              ctx=Load())],
            keywords=[]),
          ifs=[],
          is_async=0)])],
      keywords=[])),
  Assign(
    targets=[Tuple(
      elts=[
        Name(
          id='inputs_train',
          ctx=Store()),
        Name(
          id='queries_train',
          ctx=Store()),
        Name(
          id='answers_train',
          ctx=Store())],
      ctx=Store())],
    value=Call(
      func=Name(
        id='vectorize_stories',
        ctx=Load()),
      args=[Name(
        id='train_stories',
        ctx=Load())],
      keywords=[])),
  Assign(
    targets=[Tuple(
      elts=[
        Name(
          id='inputs_test',
          ctx=Store()),
        Name(
          id='queries_test',
          ctx=Store()),
        Name(
          id='answers_test',
          ctx=Store())],
      ctx=Store())],
    value=Call(
      func=Name(
        id='vectorize_stories',
        ctx=Load()),
      args=[Name(
        id='test_stories',
        ctx=Load())],
      keywords=[])),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[Str(s='-')],
    keywords=[])),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[Str(s='inputs: integer tensor of shape (samples, max_length)')],
    keywords=[])),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[
      Str(s='inputs_train shape:'),
      Attribute(
        value=Name(
          id='inputs_train',
          ctx=Load()),
        attr='shape',
        ctx=Load())],
    keywords=[])),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[
      Str(s='inputs_test shape:'),
      Attribute(
        value=Name(
          id='inputs_test',
          ctx=Load()),
        attr='shape',
        ctx=Load())],
    keywords=[])),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[Str(s='-')],
    keywords=[])),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[Str(s='queries: integer tensor of shape (samples, max_length)')],
    keywords=[])),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[
      Str(s='queries_train shape:'),
      Attribute(
        value=Name(
          id='queries_train',
          ctx=Load()),
        attr='shape',
        ctx=Load())],
    keywords=[])),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[
      Str(s='queries_test shape:'),
      Attribute(
        value=Name(
          id='queries_test',
          ctx=Load()),
        attr='shape',
        ctx=Load())],
    keywords=[])),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[Str(s='-')],
    keywords=[])),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[Str(s='answers: binary (1 or 0) tensor of shape (samples, vocab_size)')],
    keywords=[])),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[
      Str(s='answers_train shape:'),
      Attribute(
        value=Name(
          id='answers_train',
          ctx=Load()),
        attr='shape',
        ctx=Load())],
    keywords=[])),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[
      Str(s='answers_test shape:'),
      Attribute(
        value=Name(
          id='answers_test',
          ctx=Load()),
        attr='shape',
        ctx=Load())],
    keywords=[])),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[Str(s='-')],
    keywords=[])),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[Str(s='Compiling...')],
    keywords=[])),
  Assign(
    targets=[Name(
      id='input_sequence',
      ctx=Store())],
    value=Call(
      func=Name(
        id='Input',
        ctx=Load()),
      args=[Tuple(
        elts=[Name(
          id='story_maxlen',
          ctx=Load())],
        ctx=Load())],
      keywords=[])),
  Assign(
    targets=[Name(
      id='question',
      ctx=Store())],
    value=Call(
      func=Name(
        id='Input',
        ctx=Load()),
      args=[Tuple(
        elts=[Name(
          id='query_maxlen',
          ctx=Load())],
        ctx=Load())],
      keywords=[])),
  Assign(
    targets=[Name(
      id='input_encoder_m',
      ctx=Store())],
    value=Call(
      func=Name(
        id='Sequential',
        ctx=Load()),
      args=[],
      keywords=[])),
  Expr(value=Call(
    func=Attribute(
      value=Name(
        id='input_encoder_m',
        ctx=Load()),
      attr='add',
      ctx=Load()),
    args=[Call(
      func=Name(
        id='Embedding',
        ctx=Load()),
      args=[],
      keywords=[
        keyword(
          arg='input_dim',
          value=Name(
            id='vocab_size',
            ctx=Load())),
        keyword(
          arg='output_dim',
          value=Num(n=64))])],
    keywords=[])),
  Expr(value=Call(
    func=Attribute(
      value=Name(
        id='input_encoder_m',
        ctx=Load()),
      attr='add',
      ctx=Load()),
    args=[Call(
      func=Name(
        id='Dropout',
        ctx=Load()),
      args=[Num(n=0.3)],
      keywords=[])],
    keywords=[])),
  Assign(
    targets=[Name(
      id='input_encoder_c',
      ctx=Store())],
    value=Call(
      func=Name(
        id='Sequential',
        ctx=Load()),
      args=[],
      keywords=[])),
  Expr(value=Call(
    func=Attribute(
      value=Name(
        id='input_encoder_c',
        ctx=Load()),
      attr='add',
      ctx=Load()),
    args=[Call(
      func=Name(
        id='Embedding',
        ctx=Load()),
      args=[],
      keywords=[
        keyword(
          arg='input_dim',
          value=Name(
            id='vocab_size',
            ctx=Load())),
        keyword(
          arg='output_dim',
          value=Name(
            id='query_maxlen',
            ctx=Load()))])],
    keywords=[])),
  Expr(value=Call(
    func=Attribute(
      value=Name(
        id='input_encoder_c',
        ctx=Load()),
      attr='add',
      ctx=Load()),
    args=[Call(
      func=Name(
        id='Dropout',
        ctx=Load()),
      args=[Num(n=0.3)],
      keywords=[])],
    keywords=[])),
  Assign(
    targets=[Name(
      id='question_encoder',
      ctx=Store())],
    value=Call(
      func=Name(
        id='Sequential',
        ctx=Load()),
      args=[],
      keywords=[])),
  Expr(value=Call(
    func=Attribute(
      value=Name(
        id='question_encoder',
        ctx=Load()),
      attr='add',
      ctx=Load()),
    args=[Call(
      func=Name(
        id='Embedding',
        ctx=Load()),
      args=[],
      keywords=[
        keyword(
          arg='input_dim',
          value=Name(
            id='vocab_size',
            ctx=Load())),
        keyword(
          arg='output_dim',
          value=Num(n=64)),
        keyword(
          arg='input_length',
          value=Name(
            id='query_maxlen',
            ctx=Load()))])],
    keywords=[])),
  Expr(value=Call(
    func=Attribute(
      value=Name(
        id='question_encoder',
        ctx=Load()),
      attr='add',
      ctx=Load()),
    args=[Call(
      func=Name(
        id='Dropout',
        ctx=Load()),
      args=[Num(n=0.3)],
      keywords=[])],
    keywords=[])),
  Assign(
    targets=[Name(
      id='input_encoded_m',
      ctx=Store())],
    value=Call(
      func=Name(
        id='input_encoder_m',
        ctx=Load()),
      args=[Name(
        id='input_sequence',
        ctx=Load())],
      keywords=[])),
  Assign(
    targets=[Name(
      id='input_encoded_c',
      ctx=Store())],
    value=Call(
      func=Name(
        id='input_encoder_c',
        ctx=Load()),
      args=[Name(
        id='input_sequence',
        ctx=Load())],
      keywords=[])),
  Assign(
    targets=[Name(
      id='question_encoded',
      ctx=Store())],
    value=Call(
      func=Name(
        id='question_encoder',
        ctx=Load()),
      args=[Name(
        id='question',
        ctx=Load())],
      keywords=[])),
  Assign(
    targets=[Name(
      id='match',
      ctx=Store())],
    value=Call(
      func=Name(
        id='dot',
        ctx=Load()),
      args=[List(
        elts=[
          Name(
            id='input_encoded_m',
            ctx=Load()),
          Name(
            id='question_encoded',
            ctx=Load())],
        ctx=Load())],
      keywords=[keyword(
        arg='axes',
        value=Tuple(
          elts=[
            Num(n=2),
            Num(n=2)],
          ctx=Load()))])),
  Assign(
    targets=[Name(
      id='match',
      ctx=Store())],
    value=Call(
      func=Call(
        func=Name(
          id='Activation',
          ctx=Load()),
        args=[Str(s='softmax')],
        keywords=[]),
      args=[Name(
        id='match',
        ctx=Load())],
      keywords=[])),
  Assign(
    targets=[Name(
      id='response',
      ctx=Store())],
    value=Call(
      func=Name(
        id='add',
        ctx=Load()),
      args=[List(
        elts=[
          Name(
            id='match',
            ctx=Load()),
          Name(
            id='input_encoded_c',
            ctx=Load())],
        ctx=Load())],
      keywords=[])),
  Assign(
    targets=[Name(
      id='response',
      ctx=Store())],
    value=Call(
      func=Call(
        func=Name(
          id='Permute',
          ctx=Load()),
        args=[Tuple(
          elts=[
            Num(n=2),
            Num(n=1)],
          ctx=Load())],
        keywords=[]),
      args=[Name(
        id='response',
        ctx=Load())],
      keywords=[])),
  Assign(
    targets=[Name(
      id='answer',
      ctx=Store())],
    value=Call(
      func=Name(
        id='concatenate',
        ctx=Load()),
      args=[List(
        elts=[
          Name(
            id='response',
            ctx=Load()),
          Name(
            id='question_encoded',
            ctx=Load())],
        ctx=Load())],
      keywords=[])),
  Assign(
    targets=[Name(
      id='answer',
      ctx=Store())],
    value=Call(
      func=Call(
        func=Name(
          id='LSTM',
          ctx=Load()),
        args=[Num(n=32)],
        keywords=[]),
      args=[Name(
        id='answer',
        ctx=Load())],
      keywords=[])),
  Assign(
    targets=[Name(
      id='answer',
      ctx=Store())],
    value=Call(
      func=Call(
        func=Name(
          id='Dropout',
          ctx=Load()),
        args=[Num(n=0.3)],
        keywords=[]),
      args=[Name(
        id='answer',
        ctx=Load())],
      keywords=[])),
  Assign(
    targets=[Name(
      id='answer',
      ctx=Store())],
    value=Call(
      func=Call(
        func=Name(
          id='Dense',
          ctx=Load()),
        args=[Name(
          id='vocab_size',
          ctx=Load())],
        keywords=[]),
      args=[Name(
        id='answer',
        ctx=Load())],
      keywords=[])),
  Assign(
    targets=[Name(
      id='answer',
      ctx=Store())],
    value=Call(
      func=Call(
        func=Name(
          id='Activation',
          ctx=Load()),
        args=[Str(s='softmax')],
        keywords=[]),
      args=[Name(
        id='answer',
        ctx=Load())],
      keywords=[])),
  Assign(
    targets=[Name(
      id='model',
      ctx=Store())],
    value=Call(
      func=Name(
        id='Model',
        ctx=Load()),
      args=[
        List(
          elts=[
            Name(
              id='input_sequence',
              ctx=Load()),
            Name(
              id='question',
              ctx=Load())],
          ctx=Load()),
        Name(
          id='answer',
          ctx=Load())],
      keywords=[])),
  Expr(value=Call(
    func=Attribute(
      value=Name(
        id='model',
        ctx=Load()),
      attr='compile',
      ctx=Load()),
    args=[],
    keywords=[
      keyword(
        arg='optimizer',
        value=Str(s='rmsprop')),
      keyword(
        arg='loss',
        value=Str(s='sparse_categorical_crossentropy')),
      keyword(
        arg='metrics',
        value=List(
          elts=[Str(s='accuracy')],
          ctx=Load()))])),
  Expr(value=Call(
    func=Attribute(
      value=Name(
        id='model',
        ctx=Load()),
      attr='fit',
      ctx=Load()),
    args=[
      List(
        elts=[
          Name(
            id='inputs_train',
            ctx=Load()),
          Name(
            id='queries_train',
            ctx=Load())],
        ctx=Load()),
      Name(
        id='answers_train',
        ctx=Load())],
    keywords=[
      keyword(
        arg='batch_size',
        value=Num(n=32)),
      keyword(
        arg='epochs',
        value=Num(n=120)),
      keyword(
        arg='validation_data',
        value=Tuple(
          elts=[
            List(
              elts=[
                Name(
                  id='inputs_test',
                  ctx=Load()),
                Name(
                  id='queries_test',
                  ctx=Load())],
              ctx=Load()),
            Name(
              id='answers_test',
              ctx=Load())],
          ctx=Load()))]))])