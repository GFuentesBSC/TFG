Module(body=[
  Expr(value=Str(s='# Sequence-to-sequence example in Keras (character-level).\nThis script demonstrates how to implement a basic character-level CNN\nsequence-to-sequence model. We apply it to translating\nshort English sentences into short French sentences,\ncharacter-by-character. Note that it is fairly unusual to\ndo character-level machine translation, as word-level\nmodels are much more common in this domain. This example\nis for demonstration purposes only.\n**Summary of the algorithm**\n- We start with input sequences from a domain (e.g. English sentences)\n    and corresponding target sequences from another domain\n    (e.g. French sentences).\n- An encoder CNN encodes the input character sequence.\n- A decoder CNN is trained to turn the target sequences into\n    the same sequence but offset by one timestep in the future,\n    a training process called "teacher forcing" in this context.\n    It uses the output from the encoder.\n    Effectively, the decoder learns to generate `targets[t+1...]`\n    given `targets[...t]`, conditioned on the input sequence.\n- In inference mode, when we want to decode unknown input sequences, we:\n    - Encode the input sequence.\n    - Start with a target sequence of size 1\n        (just the start-of-sequence character)\n    - Feed the input sequence and 1-char target sequence\n        to the decoder to produce predictions for the next character\n    - Sample the next character using these predictions\n        (we simply use argmax).\n    - Append the sampled character to the target sequence\n    - Repeat until we hit the character limit.\n**Data download**\n[English to French sentence pairs.\n](http://www.manythings.org/anki/fra-eng.zip)\n[Lots of neat sentence pairs datasets.\n](http://www.manythings.org/anki/)\n**References**\n- lstm_seq2seq.py\n- https://wanasit.github.io/attention-based-sequence-to-sequence-in-keras.html\n')),
  ImportFrom(
    module='__future__',
    names=[alias(
      name='print_function',
      asname=None)],
    level=0),
  Import(names=[alias(
    name='numpy',
    asname='np')]),
  ImportFrom(
    module='keras.layers',
    names=[
      alias(
        name='Input',
        asname=None),
      alias(
        name='Convolution1D',
        asname=None),
      alias(
        name='Dot',
        asname=None),
      alias(
        name='Dense',
        asname=None),
      alias(
        name='Activation',
        asname=None),
      alias(
        name='Concatenate',
        asname=None)],
    level=0),
  ImportFrom(
    module='keras.models',
    names=[alias(
      name='Model',
      asname=None)],
    level=0),
  Assign(
    targets=[Name(
      id='batch_size',
      ctx=Store())],
    value=Num(n=64)),
  Assign(
    targets=[Name(
      id='epochs',
      ctx=Store())],
    value=Num(n=100)),
  Assign(
    targets=[Name(
      id='num_samples',
      ctx=Store())],
    value=Num(n=10000)),
  Assign(
    targets=[Name(
      id='data_path',
      ctx=Store())],
    value=Str(s='fra-eng/fra.txt')),
  Assign(
    targets=[Name(
      id='input_texts',
      ctx=Store())],
    value=List(
      elts=[],
      ctx=Load())),
  Assign(
    targets=[Name(
      id='target_texts',
      ctx=Store())],
    value=List(
      elts=[],
      ctx=Load())),
  Assign(
    targets=[Name(
      id='input_characters',
      ctx=Store())],
    value=Call(
      func=Name(
        id='set',
        ctx=Load()),
      args=[],
      keywords=[])),
  Assign(
    targets=[Name(
      id='target_characters',
      ctx=Store())],
    value=Call(
      func=Name(
        id='set',
        ctx=Load()),
      args=[],
      keywords=[])),
  With(
    items=[withitem(
      context_expr=Call(
        func=Name(
          id='open',
          ctx=Load()),
        args=[
          Name(
            id='data_path',
            ctx=Load()),
          Str(s='r')],
        keywords=[keyword(
          arg='encoding',
          value=Str(s='utf-8'))]),
      optional_vars=Name(
        id='f',
        ctx=Store()))],
    body=[Assign(
      targets=[Name(
        id='lines',
        ctx=Store())],
      value=Call(
        func=Attribute(
          value=Call(
            func=Attribute(
              value=Name(
                id='f',
                ctx=Load()),
              attr='read',
              ctx=Load()),
            args=[],
            keywords=[]),
          attr='split',
          ctx=Load()),
        args=[Str(s='\n')],
        keywords=[]))]),
  For(
    target=Name(
      id='line',
      ctx=Store()),
    iter=Subscript(
      value=Name(
        id='lines',
        ctx=Load()),
      slice=Slice(
        lower=None,
        upper=Call(
          func=Name(
            id='min',
            ctx=Load()),
          args=[
            Name(
              id='num_samples',
              ctx=Load()),
            BinOp(
              left=Call(
                func=Name(
                  id='len',
                  ctx=Load()),
                args=[Name(
                  id='lines',
                  ctx=Load())],
                keywords=[]),
              op=Sub(),
              right=Num(n=1))],
          keywords=[]),
        step=None),
      ctx=Load()),
    body=[
      Assign(
        targets=[Tuple(
          elts=[
            Name(
              id='input_text',
              ctx=Store()),
            Name(
              id='target_text',
              ctx=Store())],
          ctx=Store())],
        value=Call(
          func=Attribute(
            value=Name(
              id='line',
              ctx=Load()),
            attr='split',
            ctx=Load()),
          args=[Str(s='\t')],
          keywords=[])),
      Assign(
        targets=[Name(
          id='target_text',
          ctx=Store())],
        value=BinOp(
          left=BinOp(
            left=Str(s='\t'),
            op=Add(),
            right=Name(
              id='target_text',
              ctx=Load())),
          op=Add(),
          right=Str(s='\n'))),
      Expr(value=Call(
        func=Attribute(
          value=Name(
            id='input_texts',
            ctx=Load()),
          attr='append',
          ctx=Load()),
        args=[Name(
          id='input_text',
          ctx=Load())],
        keywords=[])),
      Expr(value=Call(
        func=Attribute(
          value=Name(
            id='target_texts',
            ctx=Load()),
          attr='append',
          ctx=Load()),
        args=[Name(
          id='target_text',
          ctx=Load())],
        keywords=[])),
      For(
        target=Name(
          id='char',
          ctx=Store()),
        iter=Name(
          id='input_text',
          ctx=Load()),
        body=[If(
          test=Compare(
            left=Name(
              id='char',
              ctx=Load()),
            ops=[NotIn()],
            comparators=[Name(
              id='input_characters',
              ctx=Load())]),
          body=[Expr(value=Call(
            func=Attribute(
              value=Name(
                id='input_characters',
                ctx=Load()),
              attr='add',
              ctx=Load()),
            args=[Name(
              id='char',
              ctx=Load())],
            keywords=[]))],
          orelse=[])],
        orelse=[]),
      For(
        target=Name(
          id='char',
          ctx=Store()),
        iter=Name(
          id='target_text',
          ctx=Load()),
        body=[If(
          test=Compare(
            left=Name(
              id='char',
              ctx=Load()),
            ops=[NotIn()],
            comparators=[Name(
              id='target_characters',
              ctx=Load())]),
          body=[Expr(value=Call(
            func=Attribute(
              value=Name(
                id='target_characters',
                ctx=Load()),
              attr='add',
              ctx=Load()),
            args=[Name(
              id='char',
              ctx=Load())],
            keywords=[]))],
          orelse=[])],
        orelse=[])],
    orelse=[]),
  Assign(
    targets=[Name(
      id='input_characters',
      ctx=Store())],
    value=Call(
      func=Name(
        id='sorted',
        ctx=Load()),
      args=[Call(
        func=Name(
          id='list',
          ctx=Load()),
        args=[Name(
          id='input_characters',
          ctx=Load())],
        keywords=[])],
      keywords=[])),
  Assign(
    targets=[Name(
      id='target_characters',
      ctx=Store())],
    value=Call(
      func=Name(
        id='sorted',
        ctx=Load()),
      args=[Call(
        func=Name(
          id='list',
          ctx=Load()),
        args=[Name(
          id='target_characters',
          ctx=Load())],
        keywords=[])],
      keywords=[])),
  Assign(
    targets=[Name(
      id='num_encoder_tokens',
      ctx=Store())],
    value=Call(
      func=Name(
        id='len',
        ctx=Load()),
      args=[Name(
        id='input_characters',
        ctx=Load())],
      keywords=[])),
  Assign(
    targets=[Name(
      id='num_decoder_tokens',
      ctx=Store())],
    value=Call(
      func=Name(
        id='len',
        ctx=Load()),
      args=[Name(
        id='target_characters',
        ctx=Load())],
      keywords=[])),
  Assign(
    targets=[Name(
      id='max_encoder_seq_length',
      ctx=Store())],
    value=Call(
      func=Name(
        id='max',
        ctx=Load()),
      args=[ListComp(
        elt=Call(
          func=Name(
            id='len',
            ctx=Load()),
          args=[Name(
            id='txt',
            ctx=Load())],
          keywords=[]),
        generators=[comprehension(
          target=Name(
            id='txt',
            ctx=Store()),
          iter=Name(
            id='input_texts',
            ctx=Load()),
          ifs=[],
          is_async=0)])],
      keywords=[])),
  Assign(
    targets=[Name(
      id='max_decoder_seq_length',
      ctx=Store())],
    value=Call(
      func=Name(
        id='max',
        ctx=Load()),
      args=[ListComp(
        elt=Call(
          func=Name(
            id='len',
            ctx=Load()),
          args=[Name(
            id='txt',
            ctx=Load())],
          keywords=[]),
        generators=[comprehension(
          target=Name(
            id='txt',
            ctx=Store()),
          iter=Name(
            id='target_texts',
            ctx=Load()),
          ifs=[],
          is_async=0)])],
      keywords=[])),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[
      Str(s='Number of samples:'),
      Call(
        func=Name(
          id='len',
          ctx=Load()),
        args=[Name(
          id='input_texts',
          ctx=Load())],
        keywords=[])],
    keywords=[])),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[
      Str(s='Number of unique input tokens:'),
      Name(
        id='num_encoder_tokens',
        ctx=Load())],
    keywords=[])),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[
      Str(s='Number of unique output tokens:'),
      Name(
        id='num_decoder_tokens',
        ctx=Load())],
    keywords=[])),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[
      Str(s='Max sequence length for inputs:'),
      Name(
        id='max_encoder_seq_length',
        ctx=Load())],
    keywords=[])),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[
      Str(s='Max sequence length for outputs:'),
      Name(
        id='max_decoder_seq_length',
        ctx=Load())],
    keywords=[])),
  Assign(
    targets=[Name(
      id='input_token_index',
      ctx=Store())],
    value=Call(
      func=Name(
        id='dict',
        ctx=Load()),
      args=[ListComp(
        elt=Tuple(
          elts=[
            Name(
              id='char',
              ctx=Load()),
            Name(
              id='i',
              ctx=Load())],
          ctx=Load()),
        generators=[comprehension(
          target=Tuple(
            elts=[
              Name(
                id='i',
                ctx=Store()),
              Name(
                id='char',
                ctx=Store())],
            ctx=Store()),
          iter=Call(
            func=Name(
              id='enumerate',
              ctx=Load()),
            args=[Name(
              id='input_characters',
              ctx=Load())],
            keywords=[]),
          ifs=[],
          is_async=0)])],
      keywords=[])),
  Assign(
    targets=[Name(
      id='target_token_index',
      ctx=Store())],
    value=Call(
      func=Name(
        id='dict',
        ctx=Load()),
      args=[ListComp(
        elt=Tuple(
          elts=[
            Name(
              id='char',
              ctx=Load()),
            Name(
              id='i',
              ctx=Load())],
          ctx=Load()),
        generators=[comprehension(
          target=Tuple(
            elts=[
              Name(
                id='i',
                ctx=Store()),
              Name(
                id='char',
                ctx=Store())],
            ctx=Store()),
          iter=Call(
            func=Name(
              id='enumerate',
              ctx=Load()),
            args=[Name(
              id='target_characters',
              ctx=Load())],
            keywords=[]),
          ifs=[],
          is_async=0)])],
      keywords=[])),
  Assign(
    targets=[Name(
      id='encoder_input_data',
      ctx=Store())],
    value=Call(
      func=Attribute(
        value=Name(
          id='np',
          ctx=Load()),
        attr='zeros',
        ctx=Load()),
      args=[Tuple(
        elts=[
          Call(
            func=Name(
              id='len',
              ctx=Load()),
            args=[Name(
              id='input_texts',
              ctx=Load())],
            keywords=[]),
          Name(
            id='max_encoder_seq_length',
            ctx=Load()),
          Name(
            id='num_encoder_tokens',
            ctx=Load())],
        ctx=Load())],
      keywords=[keyword(
        arg='dtype',
        value=Str(s='float32'))])),
  Assign(
    targets=[Name(
      id='decoder_input_data',
      ctx=Store())],
    value=Call(
      func=Attribute(
        value=Name(
          id='np',
          ctx=Load()),
        attr='zeros',
        ctx=Load()),
      args=[Tuple(
        elts=[
          Call(
            func=Name(
              id='len',
              ctx=Load()),
            args=[Name(
              id='input_texts',
              ctx=Load())],
            keywords=[]),
          Name(
            id='max_decoder_seq_length',
            ctx=Load()),
          Name(
            id='num_decoder_tokens',
            ctx=Load())],
        ctx=Load())],
      keywords=[keyword(
        arg='dtype',
        value=Str(s='float32'))])),
  Assign(
    targets=[Name(
      id='decoder_target_data',
      ctx=Store())],
    value=Call(
      func=Attribute(
        value=Name(
          id='np',
          ctx=Load()),
        attr='zeros',
        ctx=Load()),
      args=[Tuple(
        elts=[
          Call(
            func=Name(
              id='len',
              ctx=Load()),
            args=[Name(
              id='input_texts',
              ctx=Load())],
            keywords=[]),
          Name(
            id='max_decoder_seq_length',
            ctx=Load()),
          Name(
            id='num_decoder_tokens',
            ctx=Load())],
        ctx=Load())],
      keywords=[keyword(
        arg='dtype',
        value=Str(s='float32'))])),
  For(
    target=Tuple(
      elts=[
        Name(
          id='i',
          ctx=Store()),
        Tuple(
          elts=[
            Name(
              id='input_text',
              ctx=Store()),
            Name(
              id='target_text',
              ctx=Store())],
          ctx=Store())],
      ctx=Store()),
    iter=Call(
      func=Name(
        id='enumerate',
        ctx=Load()),
      args=[Call(
        func=Name(
          id='zip',
          ctx=Load()),
        args=[
          Name(
            id='input_texts',
            ctx=Load()),
          Name(
            id='target_texts',
            ctx=Load())],
        keywords=[])],
      keywords=[]),
    body=[
      For(
        target=Tuple(
          elts=[
            Name(
              id='t',
              ctx=Store()),
            Name(
              id='char',
              ctx=Store())],
          ctx=Store()),
        iter=Call(
          func=Name(
            id='enumerate',
            ctx=Load()),
          args=[Name(
            id='input_text',
            ctx=Load())],
          keywords=[]),
        body=[Assign(
          targets=[Subscript(
            value=Name(
              id='encoder_input_data',
              ctx=Load()),
            slice=Index(value=Tuple(
              elts=[
                Name(
                  id='i',
                  ctx=Load()),
                Name(
                  id='t',
                  ctx=Load()),
                Subscript(
                  value=Name(
                    id='input_token_index',
                    ctx=Load()),
                  slice=Index(value=Name(
                    id='char',
                    ctx=Load())),
                  ctx=Load())],
              ctx=Load())),
            ctx=Store())],
          value=Num(n=1.0))],
        orelse=[]),
      For(
        target=Tuple(
          elts=[
            Name(
              id='t',
              ctx=Store()),
            Name(
              id='char',
              ctx=Store())],
          ctx=Store()),
        iter=Call(
          func=Name(
            id='enumerate',
            ctx=Load()),
          args=[Name(
            id='target_text',
            ctx=Load())],
          keywords=[]),
        body=[
          Assign(
            targets=[Subscript(
              value=Name(
                id='decoder_input_data',
                ctx=Load()),
              slice=Index(value=Tuple(
                elts=[
                  Name(
                    id='i',
                    ctx=Load()),
                  Name(
                    id='t',
                    ctx=Load()),
                  Subscript(
                    value=Name(
                      id='target_token_index',
                      ctx=Load()),
                    slice=Index(value=Name(
                      id='char',
                      ctx=Load())),
                    ctx=Load())],
                ctx=Load())),
              ctx=Store())],
            value=Num(n=1.0)),
          If(
            test=Compare(
              left=Name(
                id='t',
                ctx=Load()),
              ops=[Gt()],
              comparators=[Num(n=0)]),
            body=[Assign(
              targets=[Subscript(
                value=Name(
                  id='decoder_target_data',
                  ctx=Load()),
                slice=Index(value=Tuple(
                  elts=[
                    Name(
                      id='i',
                      ctx=Load()),
                    BinOp(
                      left=Name(
                        id='t',
                        ctx=Load()),
                      op=Sub(),
                      right=Num(n=1)),
                    Subscript(
                      value=Name(
                        id='target_token_index',
                        ctx=Load()),
                      slice=Index(value=Name(
                        id='char',
                        ctx=Load())),
                      ctx=Load())],
                  ctx=Load())),
                ctx=Store())],
              value=Num(n=1.0))],
            orelse=[])],
        orelse=[])],
    orelse=[]),
  Assign(
    targets=[Name(
      id='encoder_inputs',
      ctx=Store())],
    value=Call(
      func=Name(
        id='Input',
        ctx=Load()),
      args=[],
      keywords=[keyword(
        arg='shape',
        value=Tuple(
          elts=[
            NameConstant(value=None),
            Name(
              id='num_encoder_tokens',
              ctx=Load())],
          ctx=Load()))])),
  Assign(
    targets=[Name(
      id='x_encoder',
      ctx=Store())],
    value=Call(
      func=Call(
        func=Name(
          id='Convolution1D',
          ctx=Load()),
        args=[Num(n=256)],
        keywords=[
          keyword(
            arg='kernel_size',
            value=Num(n=3)),
          keyword(
            arg='activation',
            value=Str(s='relu')),
          keyword(
            arg='padding',
            value=Str(s='causal'))]),
      args=[Name(
        id='encoder_inputs',
        ctx=Load())],
      keywords=[])),
  Assign(
    targets=[Name(
      id='x_encoder',
      ctx=Store())],
    value=Call(
      func=Call(
        func=Name(
          id='Convolution1D',
          ctx=Load()),
        args=[Num(n=256)],
        keywords=[
          keyword(
            arg='kernel_size',
            value=Num(n=3)),
          keyword(
            arg='activation',
            value=Str(s='relu')),
          keyword(
            arg='padding',
            value=Str(s='causal')),
          keyword(
            arg='dilation_rate',
            value=Num(n=2))]),
      args=[Name(
        id='x_encoder',
        ctx=Load())],
      keywords=[])),
  Assign(
    targets=[Name(
      id='x_encoder',
      ctx=Store())],
    value=Call(
      func=Call(
        func=Name(
          id='Convolution1D',
          ctx=Load()),
        args=[Num(n=256)],
        keywords=[
          keyword(
            arg='kernel_size',
            value=Num(n=3)),
          keyword(
            arg='activation',
            value=Str(s='relu')),
          keyword(
            arg='padding',
            value=Str(s='causal')),
          keyword(
            arg='dilation_rate',
            value=Num(n=4))]),
      args=[Name(
        id='x_encoder',
        ctx=Load())],
      keywords=[])),
  Assign(
    targets=[Name(
      id='decoder_inputs',
      ctx=Store())],
    value=Call(
      func=Name(
        id='Input',
        ctx=Load()),
      args=[],
      keywords=[keyword(
        arg='shape',
        value=Tuple(
          elts=[
            NameConstant(value=None),
            Name(
              id='num_decoder_tokens',
              ctx=Load())],
          ctx=Load()))])),
  Assign(
    targets=[Name(
      id='x_decoder',
      ctx=Store())],
    value=Call(
      func=Call(
        func=Name(
          id='Convolution1D',
          ctx=Load()),
        args=[Num(n=256)],
        keywords=[
          keyword(
            arg='kernel_size',
            value=Num(n=3)),
          keyword(
            arg='activation',
            value=Str(s='relu')),
          keyword(
            arg='padding',
            value=Str(s='causal'))]),
      args=[Name(
        id='decoder_inputs',
        ctx=Load())],
      keywords=[])),
  Assign(
    targets=[Name(
      id='x_decoder',
      ctx=Store())],
    value=Call(
      func=Call(
        func=Name(
          id='Convolution1D',
          ctx=Load()),
        args=[Num(n=256)],
        keywords=[
          keyword(
            arg='kernel_size',
            value=Num(n=3)),
          keyword(
            arg='activation',
            value=Str(s='relu')),
          keyword(
            arg='padding',
            value=Str(s='causal')),
          keyword(
            arg='dilation_rate',
            value=Num(n=2))]),
      args=[Name(
        id='x_decoder',
        ctx=Load())],
      keywords=[])),
  Assign(
    targets=[Name(
      id='x_decoder',
      ctx=Store())],
    value=Call(
      func=Call(
        func=Name(
          id='Convolution1D',
          ctx=Load()),
        args=[Num(n=256)],
        keywords=[
          keyword(
            arg='kernel_size',
            value=Num(n=3)),
          keyword(
            arg='activation',
            value=Str(s='relu')),
          keyword(
            arg='padding',
            value=Str(s='causal')),
          keyword(
            arg='dilation_rate',
            value=Num(n=4))]),
      args=[Name(
        id='x_decoder',
        ctx=Load())],
      keywords=[])),
  Assign(
    targets=[Name(
      id='attention',
      ctx=Store())],
    value=Call(
      func=Call(
        func=Name(
          id='Dot',
          ctx=Load()),
        args=[],
        keywords=[keyword(
          arg='axes',
          value=List(
            elts=[
              Num(n=2),
              Num(n=2)],
            ctx=Load()))]),
      args=[List(
        elts=[
          Name(
            id='x_decoder',
            ctx=Load()),
          Name(
            id='x_encoder',
            ctx=Load())],
        ctx=Load())],
      keywords=[])),
  Assign(
    targets=[Name(
      id='attention',
      ctx=Store())],
    value=Call(
      func=Call(
        func=Name(
          id='Activation',
          ctx=Load()),
        args=[Str(s='softmax')],
        keywords=[]),
      args=[Name(
        id='attention',
        ctx=Load())],
      keywords=[])),
  Assign(
    targets=[Name(
      id='context',
      ctx=Store())],
    value=Call(
      func=Call(
        func=Name(
          id='Dot',
          ctx=Load()),
        args=[],
        keywords=[keyword(
          arg='axes',
          value=List(
            elts=[
              Num(n=2),
              Num(n=1)],
            ctx=Load()))]),
      args=[List(
        elts=[
          Name(
            id='attention',
            ctx=Load()),
          Name(
            id='x_encoder',
            ctx=Load())],
        ctx=Load())],
      keywords=[])),
  Assign(
    targets=[Name(
      id='decoder_combined_context',
      ctx=Store())],
    value=Call(
      func=Call(
        func=Name(
          id='Concatenate',
          ctx=Load()),
        args=[],
        keywords=[keyword(
          arg='axis',
          value=UnaryOp(
            op=USub(),
            operand=Num(n=1)))]),
      args=[List(
        elts=[
          Name(
            id='context',
            ctx=Load()),
          Name(
            id='x_decoder',
            ctx=Load())],
        ctx=Load())],
      keywords=[])),
  Assign(
    targets=[Name(
      id='decoder_outputs',
      ctx=Store())],
    value=Call(
      func=Call(
        func=Name(
          id='Convolution1D',
          ctx=Load()),
        args=[Num(n=64)],
        keywords=[
          keyword(
            arg='kernel_size',
            value=Num(n=3)),
          keyword(
            arg='activation',
            value=Str(s='relu')),
          keyword(
            arg='padding',
            value=Str(s='causal'))]),
      args=[Name(
        id='decoder_combined_context',
        ctx=Load())],
      keywords=[])),
  Assign(
    targets=[Name(
      id='decoder_outputs',
      ctx=Store())],
    value=Call(
      func=Call(
        func=Name(
          id='Convolution1D',
          ctx=Load()),
        args=[Num(n=64)],
        keywords=[
          keyword(
            arg='kernel_size',
            value=Num(n=3)),
          keyword(
            arg='activation',
            value=Str(s='relu')),
          keyword(
            arg='padding',
            value=Str(s='causal'))]),
      args=[Name(
        id='decoder_outputs',
        ctx=Load())],
      keywords=[])),
  Assign(
    targets=[Name(
      id='decoder_dense',
      ctx=Store())],
    value=Call(
      func=Name(
        id='Dense',
        ctx=Load()),
      args=[Name(
        id='num_decoder_tokens',
        ctx=Load())],
      keywords=[keyword(
        arg='activation',
        value=Str(s='softmax'))])),
  Assign(
    targets=[Name(
      id='decoder_outputs',
      ctx=Store())],
    value=Call(
      func=Name(
        id='decoder_dense',
        ctx=Load()),
      args=[Name(
        id='decoder_outputs',
        ctx=Load())],
      keywords=[])),
  Assign(
    targets=[Name(
      id='model',
      ctx=Store())],
    value=Call(
      func=Name(
        id='Model',
        ctx=Load()),
      args=[
        List(
          elts=[
            Name(
              id='encoder_inputs',
              ctx=Load()),
            Name(
              id='decoder_inputs',
              ctx=Load())],
          ctx=Load()),
        Name(
          id='decoder_outputs',
          ctx=Load())],
      keywords=[])),
  Expr(value=Call(
    func=Attribute(
      value=Name(
        id='model',
        ctx=Load()),
      attr='summary',
      ctx=Load()),
    args=[],
    keywords=[])),
  Expr(value=Call(
    func=Attribute(
      value=Name(
        id='model',
        ctx=Load()),
      attr='compile',
      ctx=Load()),
    args=[],
    keywords=[
      keyword(
        arg='optimizer',
        value=Str(s='adam')),
      keyword(
        arg='loss',
        value=Str(s='categorical_crossentropy'))])),
  Expr(value=Call(
    func=Attribute(
      value=Name(
        id='model',
        ctx=Load()),
      attr='fit',
      ctx=Load()),
    args=[
      List(
        elts=[
          Name(
            id='encoder_input_data',
            ctx=Load()),
          Name(
            id='decoder_input_data',
            ctx=Load())],
        ctx=Load()),
      Name(
        id='decoder_target_data',
        ctx=Load())],
    keywords=[
      keyword(
        arg='batch_size',
        value=Name(
          id='batch_size',
          ctx=Load())),
      keyword(
        arg='epochs',
        value=Name(
          id='epochs',
          ctx=Load())),
      keyword(
        arg='validation_split',
        value=Num(n=0.2))])),
  Expr(value=Call(
    func=Attribute(
      value=Name(
        id='model',
        ctx=Load()),
      attr='save',
      ctx=Load()),
    args=[Str(s='cnn_s2s.h5')],
    keywords=[])),
  Assign(
    targets=[Name(
      id='reverse_input_char_index',
      ctx=Store())],
    value=Call(
      func=Name(
        id='dict',
        ctx=Load()),
      args=[GeneratorExp(
        elt=Tuple(
          elts=[
            Name(
              id='i',
              ctx=Load()),
            Name(
              id='char',
              ctx=Load())],
          ctx=Load()),
        generators=[comprehension(
          target=Tuple(
            elts=[
              Name(
                id='char',
                ctx=Store()),
              Name(
                id='i',
                ctx=Store())],
            ctx=Store()),
          iter=Call(
            func=Attribute(
              value=Name(
                id='input_token_index',
                ctx=Load()),
              attr='items',
              ctx=Load()),
            args=[],
            keywords=[]),
          ifs=[],
          is_async=0)])],
      keywords=[])),
  Assign(
    targets=[Name(
      id='reverse_target_char_index',
      ctx=Store())],
    value=Call(
      func=Name(
        id='dict',
        ctx=Load()),
      args=[GeneratorExp(
        elt=Tuple(
          elts=[
            Name(
              id='i',
              ctx=Load()),
            Name(
              id='char',
              ctx=Load())],
          ctx=Load()),
        generators=[comprehension(
          target=Tuple(
            elts=[
              Name(
                id='char',
                ctx=Store()),
              Name(
                id='i',
                ctx=Store())],
            ctx=Store()),
          iter=Call(
            func=Attribute(
              value=Name(
                id='target_token_index',
                ctx=Load()),
              attr='items',
              ctx=Load()),
            args=[],
            keywords=[]),
          ifs=[],
          is_async=0)])],
      keywords=[])),
  Assign(
    targets=[Name(
      id='nb_examples',
      ctx=Store())],
    value=Num(n=100)),
  Assign(
    targets=[Name(
      id='in_encoder',
      ctx=Store())],
    value=Subscript(
      value=Name(
        id='encoder_input_data',
        ctx=Load()),
      slice=Slice(
        lower=None,
        upper=Name(
          id='nb_examples',
          ctx=Load()),
        step=None),
      ctx=Load())),
  Assign(
    targets=[Name(
      id='in_decoder',
      ctx=Store())],
    value=Call(
      func=Attribute(
        value=Name(
          id='np',
          ctx=Load()),
        attr='zeros',
        ctx=Load()),
      args=[Tuple(
        elts=[
          Call(
            func=Name(
              id='len',
              ctx=Load()),
            args=[Name(
              id='input_texts',
              ctx=Load())],
            keywords=[]),
          Name(
            id='max_decoder_seq_length',
            ctx=Load()),
          Name(
            id='num_decoder_tokens',
            ctx=Load())],
        ctx=Load())],
      keywords=[keyword(
        arg='dtype',
        value=Str(s='float32'))])),
  Assign(
    targets=[Subscript(
      value=Name(
        id='in_decoder',
        ctx=Load()),
      slice=ExtSlice(dims=[
        Slice(
          lower=None,
          upper=None,
          step=None),
        Index(value=Num(n=0)),
        Index(value=Subscript(
          value=Name(
            id='target_token_index',
            ctx=Load()),
          slice=Index(value=Str(s='\t')),
          ctx=Load()))]),
      ctx=Store())],
    value=Num(n=1)),
  Assign(
    targets=[Name(
      id='predict',
      ctx=Store())],
    value=Call(
      func=Attribute(
        value=Name(
          id='np',
          ctx=Load()),
        attr='zeros',
        ctx=Load()),
      args=[Tuple(
        elts=[
          Call(
            func=Name(
              id='len',
              ctx=Load()),
            args=[Name(
              id='input_texts',
              ctx=Load())],
            keywords=[]),
          Name(
            id='max_decoder_seq_length',
            ctx=Load())],
        ctx=Load())],
      keywords=[keyword(
        arg='dtype',
        value=Str(s='float32'))])),
  For(
    target=Name(
      id='i',
      ctx=Store()),
    iter=Call(
      func=Name(
        id='range',
        ctx=Load()),
      args=[BinOp(
        left=Name(
          id='max_decoder_seq_length',
          ctx=Load()),
        op=Sub(),
        right=Num(n=1))],
      keywords=[]),
    body=[
      Assign(
        targets=[Name(
          id='predict',
          ctx=Store())],
        value=Call(
          func=Attribute(
            value=Name(
              id='model',
              ctx=Load()),
            attr='predict',
            ctx=Load()),
          args=[List(
            elts=[
              Name(
                id='in_encoder',
                ctx=Load()),
              Name(
                id='in_decoder',
                ctx=Load())],
            ctx=Load())],
          keywords=[])),
      Assign(
        targets=[Name(
          id='predict',
          ctx=Store())],
        value=Call(
          func=Attribute(
            value=Name(
              id='predict',
              ctx=Load()),
            attr='argmax',
            ctx=Load()),
          args=[],
          keywords=[keyword(
            arg='axis',
            value=UnaryOp(
              op=USub(),
              operand=Num(n=1)))])),
      Assign(
        targets=[Name(
          id='predict_',
          ctx=Store())],
        value=Call(
          func=Attribute(
            value=Call(
              func=Attribute(
                value=Subscript(
                  value=Name(
                    id='predict',
                    ctx=Load()),
                  slice=ExtSlice(dims=[
                    Slice(
                      lower=None,
                      upper=None,
                      step=None),
                    Index(value=Name(
                      id='i',
                      ctx=Load()))]),
                  ctx=Load()),
                attr='ravel',
                ctx=Load()),
              args=[],
              keywords=[]),
            attr='tolist',
            ctx=Load()),
          args=[],
          keywords=[])),
      For(
        target=Tuple(
          elts=[
            Name(
              id='j',
              ctx=Store()),
            Name(
              id='x',
              ctx=Store())],
          ctx=Store()),
        iter=Call(
          func=Name(
            id='enumerate',
            ctx=Load()),
          args=[Name(
            id='predict_',
            ctx=Load())],
          keywords=[]),
        body=[Assign(
          targets=[Subscript(
            value=Name(
              id='in_decoder',
              ctx=Load()),
            slice=Index(value=Tuple(
              elts=[
                Name(
                  id='j',
                  ctx=Load()),
                BinOp(
                  left=Name(
                    id='i',
                    ctx=Load()),
                  op=Add(),
                  right=Num(n=1)),
                Name(
                  id='x',
                  ctx=Load())],
              ctx=Load())),
            ctx=Store())],
          value=Num(n=1))],
        orelse=[])],
    orelse=[]),
  For(
    target=Name(
      id='seq_index',
      ctx=Store()),
    iter=Call(
      func=Name(
        id='range',
        ctx=Load()),
      args=[Name(
        id='nb_examples',
        ctx=Load())],
      keywords=[]),
    body=[
      Assign(
        targets=[Name(
          id='output_seq',
          ctx=Store())],
        value=Call(
          func=Attribute(
            value=Call(
              func=Attribute(
                value=Subscript(
                  value=Name(
                    id='predict',
                    ctx=Load()),
                  slice=ExtSlice(dims=[
                    Index(value=Name(
                      id='seq_index',
                      ctx=Load())),
                    Slice(
                      lower=None,
                      upper=None,
                      step=None)]),
                  ctx=Load()),
                attr='ravel',
                ctx=Load()),
              args=[],
              keywords=[]),
            attr='tolist',
            ctx=Load()),
          args=[],
          keywords=[])),
      Assign(
        targets=[Name(
          id='decoded',
          ctx=Store())],
        value=List(
          elts=[],
          ctx=Load())),
      For(
        target=Name(
          id='x',
          ctx=Store()),
        iter=Name(
          id='output_seq',
          ctx=Load()),
        body=[If(
          test=Compare(
            left=Subscript(
              value=Name(
                id='reverse_target_char_index',
                ctx=Load()),
              slice=Index(value=Name(
                id='x',
                ctx=Load())),
              ctx=Load()),
            ops=[Eq()],
            comparators=[Str(s='\n')]),
          body=[Break()],
          orelse=[Expr(value=Call(
            func=Attribute(
              value=Name(
                id='decoded',
                ctx=Load()),
              attr='append',
              ctx=Load()),
            args=[Subscript(
              value=Name(
                id='reverse_target_char_index',
                ctx=Load()),
              slice=Index(value=Name(
                id='x',
                ctx=Load())),
              ctx=Load())],
            keywords=[]))])],
        orelse=[]),
      Assign(
        targets=[Name(
          id='decoded_sentence',
          ctx=Store())],
        value=Call(
          func=Attribute(
            value=Str(s=''),
            attr='join',
            ctx=Load()),
          args=[Name(
            id='decoded',
            ctx=Load())],
          keywords=[])),
      Expr(value=Call(
        func=Name(
          id='print',
          ctx=Load()),
        args=[Str(s='-')],
        keywords=[])),
      Expr(value=Call(
        func=Name(
          id='print',
          ctx=Load()),
        args=[
          Str(s='Input sentence:'),
          Subscript(
            value=Name(
              id='input_texts',
              ctx=Load()),
            slice=Index(value=Name(
              id='seq_index',
              ctx=Load())),
            ctx=Load())],
        keywords=[])),
      Expr(value=Call(
        func=Name(
          id='print',
          ctx=Load()),
        args=[
          Str(s='Decoded sentence:'),
          Name(
            id='decoded_sentence',
            ctx=Load())],
        keywords=[]))],
    orelse=[])])