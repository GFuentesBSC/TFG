Module(body=[
  ImportFrom(
    module='__future__',
    names=[alias(
      name='print_function',
      asname=None)],
    level=0),
  Import(names=[alias(
    name='tensorflow.keras',
    asname='keras')]),
  ImportFrom(
    module='tensorflow.keras.datasets',
    names=[alias(
      name='cifar10',
      asname=None)],
    level=0),
  ImportFrom(
    module='tensorflow.keras.preprocessing.image',
    names=[alias(
      name='ImageDataGenerator',
      asname=None)],
    level=0),
  ImportFrom(
    module='tensorflow.keras.models',
    names=[alias(
      name='Sequential',
      asname=None)],
    level=0),
  ImportFrom(
    module='tensorflow.keras.layers',
    names=[
      alias(
        name='Dense',
        asname=None),
      alias(
        name='Dropout',
        asname=None),
      alias(
        name='Activation',
        asname=None),
      alias(
        name='Flatten',
        asname=None)],
    level=0),
  ImportFrom(
    module='tensorflow.keras.layers',
    names=[
      alias(
        name='Conv2D',
        asname=None),
      alias(
        name='MaxPooling2D',
        asname=None)],
    level=0),
  Import(names=[alias(
    name='os',
    asname=None)]),
  Assign(
    targets=[Name(
      id='batch_size',
      ctx=Store())],
    value=Num(n=32)),
  Assign(
    targets=[Name(
      id='num_classes',
      ctx=Store())],
    value=Num(n=10)),
  Assign(
    targets=[Name(
      id='epochs',
      ctx=Store())],
    value=Num(n=100)),
  Assign(
    targets=[Name(
      id='data_augmentation',
      ctx=Store())],
    value=NameConstant(value=True)),
  Assign(
    targets=[Name(
      id='num_predictions',
      ctx=Store())],
    value=Num(n=20)),
  Assign(
    targets=[Name(
      id='save_dir',
      ctx=Store())],
    value=Call(
      func=Attribute(
        value=Attribute(
          value=Name(
            id='os',
            ctx=Load()),
          attr='path',
          ctx=Load()),
        attr='join',
        ctx=Load()),
      args=[
        Call(
          func=Attribute(
            value=Name(
              id='os',
              ctx=Load()),
            attr='getcwd',
            ctx=Load()),
          args=[],
          keywords=[]),
        Str(s='saved_models')],
      keywords=[])),
  Assign(
    targets=[Name(
      id='model_name',
      ctx=Store())],
    value=Str(s='keras_cifar10_trained_model.h5')),
  Assign(
    targets=[Tuple(
      elts=[
        Tuple(
          elts=[
            Name(
              id='x_train',
              ctx=Store()),
            Name(
              id='y_train',
              ctx=Store())],
          ctx=Store()),
        Tuple(
          elts=[
            Name(
              id='x_test',
              ctx=Store()),
            Name(
              id='y_test',
              ctx=Store())],
          ctx=Store())],
      ctx=Store())],
    value=Call(
      func=Attribute(
        value=Name(
          id='cifar10',
          ctx=Load()),
        attr='load_data',
        ctx=Load()),
      args=[],
      keywords=[])),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[
      Str(s='x_train shape:'),
      Attribute(
        value=Name(
          id='x_train',
          ctx=Load()),
        attr='shape',
        ctx=Load())],
    keywords=[])),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[
      Subscript(
        value=Attribute(
          value=Name(
            id='x_train',
            ctx=Load()),
          attr='shape',
          ctx=Load()),
        slice=Index(value=Num(n=0)),
        ctx=Load()),
      Str(s='train samples')],
    keywords=[])),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[
      Subscript(
        value=Attribute(
          value=Name(
            id='x_test',
            ctx=Load()),
          attr='shape',
          ctx=Load()),
        slice=Index(value=Num(n=0)),
        ctx=Load()),
      Str(s='test samples')],
    keywords=[])),
  Assign(
    targets=[Name(
      id='y_train',
      ctx=Store())],
    value=Call(
      func=Attribute(
        value=Attribute(
          value=Name(
            id='keras',
            ctx=Load()),
          attr='utils',
          ctx=Load()),
        attr='to_categorical',
        ctx=Load()),
      args=[
        Name(
          id='y_train',
          ctx=Load()),
        Name(
          id='num_classes',
          ctx=Load())],
      keywords=[])),
  Assign(
    targets=[Name(
      id='y_test',
      ctx=Store())],
    value=Call(
      func=Attribute(
        value=Attribute(
          value=Name(
            id='keras',
            ctx=Load()),
          attr='utils',
          ctx=Load()),
        attr='to_categorical',
        ctx=Load()),
      args=[
        Name(
          id='y_test',
          ctx=Load()),
        Name(
          id='num_classes',
          ctx=Load())],
      keywords=[])),
  Assign(
    targets=[Name(
      id='model',
      ctx=Store())],
    value=Call(
      func=Name(
        id='Sequential',
        ctx=Load()),
      args=[],
      keywords=[])),
  Expr(value=Call(
    func=Attribute(
      value=Name(
        id='model',
        ctx=Load()),
      attr='add',
      ctx=Load()),
    args=[Call(
      func=Name(
        id='Conv2D',
        ctx=Load()),
      args=[
        Num(n=32),
        Tuple(
          elts=[
            Num(n=3),
            Num(n=3)],
          ctx=Load())],
      keywords=[
        keyword(
          arg='padding',
          value=Str(s='same')),
        keyword(
          arg='input_shape',
          value=Subscript(
            value=Attribute(
              value=Name(
                id='x_train',
                ctx=Load()),
              attr='shape',
              ctx=Load()),
            slice=Slice(
              lower=Num(n=1),
              upper=None,
              step=None),
            ctx=Load()))])],
    keywords=[])),
  Expr(value=Call(
    func=Attribute(
      value=Name(
        id='model',
        ctx=Load()),
      attr='add',
      ctx=Load()),
    args=[Call(
      func=Name(
        id='Activation',
        ctx=Load()),
      args=[Str(s='relu')],
      keywords=[])],
    keywords=[])),
  Expr(value=Call(
    func=Attribute(
      value=Name(
        id='model',
        ctx=Load()),
      attr='add',
      ctx=Load()),
    args=[Call(
      func=Name(
        id='Conv2D',
        ctx=Load()),
      args=[
        Num(n=32),
        Tuple(
          elts=[
            Num(n=3),
            Num(n=3)],
          ctx=Load())],
      keywords=[])],
    keywords=[])),
  Expr(value=Call(
    func=Attribute(
      value=Name(
        id='model',
        ctx=Load()),
      attr='add',
      ctx=Load()),
    args=[Call(
      func=Name(
        id='Activation',
        ctx=Load()),
      args=[Str(s='relu')],
      keywords=[])],
    keywords=[])),
  Expr(value=Call(
    func=Attribute(
      value=Name(
        id='model',
        ctx=Load()),
      attr='add',
      ctx=Load()),
    args=[Call(
      func=Name(
        id='MaxPooling2D',
        ctx=Load()),
      args=[],
      keywords=[keyword(
        arg='pool_size',
        value=Tuple(
          elts=[
            Num(n=2),
            Num(n=2)],
          ctx=Load()))])],
    keywords=[])),
  Expr(value=Call(
    func=Attribute(
      value=Name(
        id='model',
        ctx=Load()),
      attr='add',
      ctx=Load()),
    args=[Call(
      func=Name(
        id='Dropout',
        ctx=Load()),
      args=[Num(n=0.25)],
      keywords=[])],
    keywords=[])),
  Expr(value=Call(
    func=Attribute(
      value=Name(
        id='model',
        ctx=Load()),
      attr='add',
      ctx=Load()),
    args=[Call(
      func=Name(
        id='Conv2D',
        ctx=Load()),
      args=[
        Num(n=64),
        Tuple(
          elts=[
            Num(n=3),
            Num(n=3)],
          ctx=Load())],
      keywords=[keyword(
        arg='padding',
        value=Str(s='same'))])],
    keywords=[])),
  Expr(value=Call(
    func=Attribute(
      value=Name(
        id='model',
        ctx=Load()),
      attr='add',
      ctx=Load()),
    args=[Call(
      func=Name(
        id='Activation',
        ctx=Load()),
      args=[Str(s='relu')],
      keywords=[])],
    keywords=[])),
  Expr(value=Call(
    func=Attribute(
      value=Name(
        id='model',
        ctx=Load()),
      attr='add',
      ctx=Load()),
    args=[Call(
      func=Name(
        id='Conv2D',
        ctx=Load()),
      args=[
        Num(n=64),
        Tuple(
          elts=[
            Num(n=3),
            Num(n=3)],
          ctx=Load())],
      keywords=[])],
    keywords=[])),
  Expr(value=Call(
    func=Attribute(
      value=Name(
        id='model',
        ctx=Load()),
      attr='add',
      ctx=Load()),
    args=[Call(
      func=Name(
        id='Activation',
        ctx=Load()),
      args=[Str(s='relu')],
      keywords=[])],
    keywords=[])),
  Expr(value=Call(
    func=Attribute(
      value=Name(
        id='model',
        ctx=Load()),
      attr='add',
      ctx=Load()),
    args=[Call(
      func=Name(
        id='MaxPooling2D',
        ctx=Load()),
      args=[],
      keywords=[keyword(
        arg='pool_size',
        value=Tuple(
          elts=[
            Num(n=2),
            Num(n=2)],
          ctx=Load()))])],
    keywords=[])),
  Expr(value=Call(
    func=Attribute(
      value=Name(
        id='model',
        ctx=Load()),
      attr='add',
      ctx=Load()),
    args=[Call(
      func=Name(
        id='Dropout',
        ctx=Load()),
      args=[Num(n=0.25)],
      keywords=[])],
    keywords=[])),
  Expr(value=Call(
    func=Attribute(
      value=Name(
        id='model',
        ctx=Load()),
      attr='add',
      ctx=Load()),
    args=[Call(
      func=Name(
        id='Flatten',
        ctx=Load()),
      args=[],
      keywords=[])],
    keywords=[])),
  Expr(value=Call(
    func=Attribute(
      value=Name(
        id='model',
        ctx=Load()),
      attr='add',
      ctx=Load()),
    args=[Call(
      func=Name(
        id='Dense',
        ctx=Load()),
      args=[Num(n=512)],
      keywords=[])],
    keywords=[])),
  Expr(value=Call(
    func=Attribute(
      value=Name(
        id='model',
        ctx=Load()),
      attr='add',
      ctx=Load()),
    args=[Call(
      func=Name(
        id='Activation',
        ctx=Load()),
      args=[Str(s='relu')],
      keywords=[])],
    keywords=[])),
  Expr(value=Call(
    func=Attribute(
      value=Name(
        id='model',
        ctx=Load()),
      attr='add',
      ctx=Load()),
    args=[Call(
      func=Name(
        id='Dropout',
        ctx=Load()),
      args=[Num(n=0.5)],
      keywords=[])],
    keywords=[])),
  Expr(value=Call(
    func=Attribute(
      value=Name(
        id='model',
        ctx=Load()),
      attr='add',
      ctx=Load()),
    args=[Call(
      func=Name(
        id='Dense',
        ctx=Load()),
      args=[Name(
        id='num_classes',
        ctx=Load())],
      keywords=[])],
    keywords=[])),
  Expr(value=Call(
    func=Attribute(
      value=Name(
        id='model',
        ctx=Load()),
      attr='add',
      ctx=Load()),
    args=[Call(
      func=Name(
        id='Activation',
        ctx=Load()),
      args=[Str(s='softmax')],
      keywords=[])],
    keywords=[])),
  Assign(
    targets=[Name(
      id='opt',
      ctx=Store())],
    value=Call(
      func=Attribute(
        value=Attribute(
          value=Name(
            id='keras',
            ctx=Load()),
          attr='optimizers',
          ctx=Load()),
        attr='RMSprop',
        ctx=Load()),
      args=[],
      keywords=[
        keyword(
          arg='learning_rate',
          value=Num(n=0.0001)),
        keyword(
          arg='decay',
          value=Num(n=1e-06))])),
  Expr(value=Call(
    func=Attribute(
      value=Name(
        id='model',
        ctx=Load()),
      attr='compile',
      ctx=Load()),
    args=[],
    keywords=[
      keyword(
        arg='loss',
        value=Str(s='categorical_crossentropy')),
      keyword(
        arg='optimizer',
        value=Name(
          id='opt',
          ctx=Load())),
      keyword(
        arg='metrics',
        value=List(
          elts=[Str(s='accuracy')],
          ctx=Load()))])),
  Assign(
    targets=[Name(
      id='x_train',
      ctx=Store())],
    value=Call(
      func=Attribute(
        value=Name(
          id='x_train',
          ctx=Load()),
        attr='astype',
        ctx=Load()),
      args=[Str(s='float32')],
      keywords=[])),
  Assign(
    targets=[Name(
      id='x_test',
      ctx=Store())],
    value=Call(
      func=Attribute(
        value=Name(
          id='x_test',
          ctx=Load()),
        attr='astype',
        ctx=Load()),
      args=[Str(s='float32')],
      keywords=[])),
  AugAssign(
    target=Name(
      id='x_train',
      ctx=Store()),
    op=Div(),
    value=Num(n=255)),
  AugAssign(
    target=Name(
      id='x_test',
      ctx=Store()),
    op=Div(),
    value=Num(n=255)),
  If(
    test=UnaryOp(
      op=Not(),
      operand=Name(
        id='data_augmentation',
        ctx=Load())),
    body=[
      Expr(value=Call(
        func=Name(
          id='print',
          ctx=Load()),
        args=[Str(s='Not using data augmentation.')],
        keywords=[])),
      Expr(value=Call(
        func=Attribute(
          value=Name(
            id='model',
            ctx=Load()),
          attr='fit',
          ctx=Load()),
        args=[
          Name(
            id='x_train',
            ctx=Load()),
          Name(
            id='y_train',
            ctx=Load())],
        keywords=[
          keyword(
            arg='batch_size',
            value=Name(
              id='batch_size',
              ctx=Load())),
          keyword(
            arg='epochs',
            value=Name(
              id='epochs',
              ctx=Load())),
          keyword(
            arg='validation_data',
            value=Tuple(
              elts=[
                Name(
                  id='x_test',
                  ctx=Load()),
                Name(
                  id='y_test',
                  ctx=Load())],
              ctx=Load())),
          keyword(
            arg='shuffle',
            value=NameConstant(value=True))]))],
    orelse=[
      Expr(value=Call(
        func=Name(
          id='print',
          ctx=Load()),
        args=[Str(s='Using real-time data augmentation.')],
        keywords=[])),
      Assign(
        targets=[Name(
          id='datagen',
          ctx=Store())],
        value=Call(
          func=Name(
            id='ImageDataGenerator',
            ctx=Load()),
          args=[],
          keywords=[
            keyword(
              arg='featurewise_center',
              value=NameConstant(value=False)),
            keyword(
              arg='samplewise_center',
              value=NameConstant(value=False)),
            keyword(
              arg='featurewise_std_normalization',
              value=NameConstant(value=False)),
            keyword(
              arg='samplewise_std_normalization',
              value=NameConstant(value=False)),
            keyword(
              arg='zca_whitening',
              value=NameConstant(value=False)),
            keyword(
              arg='zca_epsilon',
              value=Num(n=1e-06)),
            keyword(
              arg='rotation_range',
              value=Num(n=0)),
            keyword(
              arg='width_shift_range',
              value=Num(n=0.1)),
            keyword(
              arg='height_shift_range',
              value=Num(n=0.1)),
            keyword(
              arg='shear_range',
              value=Num(n=0.0)),
            keyword(
              arg='zoom_range',
              value=Num(n=0.0)),
            keyword(
              arg='channel_shift_range',
              value=Num(n=0.0)),
            keyword(
              arg='fill_mode',
              value=Str(s='nearest')),
            keyword(
              arg='cval',
              value=Num(n=0.0)),
            keyword(
              arg='horizontal_flip',
              value=NameConstant(value=True)),
            keyword(
              arg='vertical_flip',
              value=NameConstant(value=False)),
            keyword(
              arg='rescale',
              value=NameConstant(value=None)),
            keyword(
              arg='preprocessing_function',
              value=NameConstant(value=None)),
            keyword(
              arg='data_format',
              value=NameConstant(value=None)),
            keyword(
              arg='validation_split',
              value=Num(n=0.0))])),
      Expr(value=Call(
        func=Attribute(
          value=Name(
            id='datagen',
            ctx=Load()),
          attr='fit',
          ctx=Load()),
        args=[Name(
          id='x_train',
          ctx=Load())],
        keywords=[])),
      Expr(value=Call(
        func=Attribute(
          value=Name(
            id='model',
            ctx=Load()),
          attr='fit_generator',
          ctx=Load()),
        args=[Call(
          func=Attribute(
            value=Name(
              id='datagen',
              ctx=Load()),
            attr='flow',
            ctx=Load()),
          args=[
            Name(
              id='x_train',
              ctx=Load()),
            Name(
              id='y_train',
              ctx=Load())],
          keywords=[keyword(
            arg='batch_size',
            value=Name(
              id='batch_size',
              ctx=Load()))])],
        keywords=[
          keyword(
            arg='epochs',
            value=Name(
              id='epochs',
              ctx=Load())),
          keyword(
            arg='validation_data',
            value=Tuple(
              elts=[
                Name(
                  id='x_test',
                  ctx=Load()),
                Name(
                  id='y_test',
                  ctx=Load())],
              ctx=Load())),
          keyword(
            arg='workers',
            value=Num(n=4))]))]),
  If(
    test=UnaryOp(
      op=Not(),
      operand=Call(
        func=Attribute(
          value=Attribute(
            value=Name(
              id='os',
              ctx=Load()),
            attr='path',
            ctx=Load()),
          attr='isdir',
          ctx=Load()),
        args=[Name(
          id='save_dir',
          ctx=Load())],
        keywords=[])),
    body=[Expr(value=Call(
      func=Attribute(
        value=Name(
          id='os',
          ctx=Load()),
        attr='makedirs',
        ctx=Load()),
      args=[Name(
        id='save_dir',
        ctx=Load())],
      keywords=[]))],
    orelse=[]),
  Assign(
    targets=[Name(
      id='model_path',
      ctx=Store())],
    value=Call(
      func=Attribute(
        value=Attribute(
          value=Name(
            id='os',
            ctx=Load()),
          attr='path',
          ctx=Load()),
        attr='join',
        ctx=Load()),
      args=[
        Name(
          id='save_dir',
          ctx=Load()),
        Name(
          id='model_name',
          ctx=Load())],
      keywords=[])),
  Expr(value=Call(
    func=Attribute(
      value=Name(
        id='model',
        ctx=Load()),
      attr='save',
      ctx=Load()),
    args=[Name(
      id='model_path',
      ctx=Load())],
    keywords=[])),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[BinOp(
      left=Str(s='Saved trained model at %s '),
      op=Mod(),
      right=Name(
        id='model_path',
        ctx=Load()))],
    keywords=[])),
  Assign(
    targets=[Name(
      id='scores',
      ctx=Store())],
    value=Call(
      func=Attribute(
        value=Name(
          id='model',
          ctx=Load()),
        attr='evaluate',
        ctx=Load()),
      args=[
        Name(
          id='x_test',
          ctx=Load()),
        Name(
          id='y_test',
          ctx=Load())],
      keywords=[keyword(
        arg='verbose',
        value=Num(n=1))])),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[
      Str(s='Test loss:'),
      Subscript(
        value=Name(
          id='scores',
          ctx=Load()),
        slice=Index(value=Num(n=0)),
        ctx=Load())],
    keywords=[])),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[
      Str(s='Test accuracy:'),
      Subscript(
        value=Name(
          id='scores',
          ctx=Load()),
        slice=Index(value=Num(n=1)),
        ctx=Load())],
    keywords=[]))])