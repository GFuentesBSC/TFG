Module(body=[
  ImportFrom(
    module='__future__',
    names=[alias(
      name='print_function',
      asname=None)],
    level=0),
  Import(names=[alias(
    name='tensorflow.keras',
    asname='keras')]),
  ImportFrom(
    module='tensorflow.keras.layers',
    names=[
      alias(
        name='Dense',
        asname=None),
      alias(
        name='Conv2D',
        asname=None),
      alias(
        name='BatchNormalization',
        asname=None),
      alias(
        name='Activation',
        asname=None)],
    level=0),
  ImportFrom(
    module='tensorflow.keras.layers',
    names=[
      alias(
        name='AveragePooling2D',
        asname=None),
      alias(
        name='Input',
        asname=None),
      alias(
        name='Flatten',
        asname=None)],
    level=0),
  ImportFrom(
    module='tensorflow.keras.optimizers',
    names=[alias(
      name='Adam',
      asname=None)],
    level=0),
  ImportFrom(
    module='tensorflow.keras.callbacks',
    names=[
      alias(
        name='ModelCheckpoint',
        asname=None),
      alias(
        name='LearningRateScheduler',
        asname=None)],
    level=0),
  ImportFrom(
    module='tensorflow.keras.callbacks',
    names=[alias(
      name='ReduceLROnPlateau',
      asname=None)],
    level=0),
  ImportFrom(
    module='tensorflow.keras.preprocessing.image',
    names=[alias(
      name='ImageDataGenerator',
      asname=None)],
    level=0),
  ImportFrom(
    module='tensorflow.keras.regularizers',
    names=[alias(
      name='l2',
      asname=None)],
    level=0),
  ImportFrom(
    module='tensorflow.keras',
    names=[alias(
      name='backend',
      asname='K')],
    level=0),
  ImportFrom(
    module='tensorflow.keras.models',
    names=[alias(
      name='Model',
      asname=None)],
    level=0),
  ImportFrom(
    module='tensorflow.keras.datasets',
    names=[alias(
      name='cifar10',
      asname=None)],
    level=0),
  Import(names=[alias(
    name='numpy',
    asname='np')]),
  Import(names=[alias(
    name='os',
    asname=None)]),
  Assign(
    targets=[Name(
      id='batch_size',
      ctx=Store())],
    value=Num(n=32)),
  Assign(
    targets=[Name(
      id='epochs',
      ctx=Store())],
    value=Num(n=200)),
  Assign(
    targets=[Name(
      id='data_augmentation',
      ctx=Store())],
    value=NameConstant(value=True)),
  Assign(
    targets=[Name(
      id='num_classes',
      ctx=Store())],
    value=Num(n=10)),
  Assign(
    targets=[Name(
      id='subtract_pixel_mean',
      ctx=Store())],
    value=NameConstant(value=True)),
  Assign(
    targets=[Name(
      id='n',
      ctx=Store())],
    value=Num(n=3)),
  Assign(
    targets=[Name(
      id='version',
      ctx=Store())],
    value=Num(n=1)),
  If(
    test=Compare(
      left=Name(
        id='version',
        ctx=Load()),
      ops=[Eq()],
      comparators=[Num(n=1)]),
    body=[Assign(
      targets=[Name(
        id='depth',
        ctx=Store())],
      value=BinOp(
        left=BinOp(
          left=Name(
            id='n',
            ctx=Load()),
          op=Mult(),
          right=Num(n=6)),
        op=Add(),
        right=Num(n=2)))],
    orelse=[If(
      test=Compare(
        left=Name(
          id='version',
          ctx=Load()),
        ops=[Eq()],
        comparators=[Num(n=2)]),
      body=[Assign(
        targets=[Name(
          id='depth',
          ctx=Store())],
        value=BinOp(
          left=BinOp(
            left=Name(
              id='n',
              ctx=Load()),
            op=Mult(),
            right=Num(n=9)),
          op=Add(),
          right=Num(n=2)))],
      orelse=[])]),
  Assign(
    targets=[Name(
      id='model_type',
      ctx=Store())],
    value=BinOp(
      left=Str(s='ResNet%dv%d'),
      op=Mod(),
      right=Tuple(
        elts=[
          Name(
            id='depth',
            ctx=Load()),
          Name(
            id='version',
            ctx=Load())],
        ctx=Load()))),
  Assign(
    targets=[Tuple(
      elts=[
        Tuple(
          elts=[
            Name(
              id='x_train',
              ctx=Store()),
            Name(
              id='y_train',
              ctx=Store())],
          ctx=Store()),
        Tuple(
          elts=[
            Name(
              id='x_test',
              ctx=Store()),
            Name(
              id='y_test',
              ctx=Store())],
          ctx=Store())],
      ctx=Store())],
    value=Call(
      func=Attribute(
        value=Name(
          id='cifar10',
          ctx=Load()),
        attr='load_data',
        ctx=Load()),
      args=[],
      keywords=[])),
  Assign(
    targets=[Name(
      id='input_shape',
      ctx=Store())],
    value=Subscript(
      value=Attribute(
        value=Name(
          id='x_train',
          ctx=Load()),
        attr='shape',
        ctx=Load()),
      slice=Slice(
        lower=Num(n=1),
        upper=None,
        step=None),
      ctx=Load())),
  Assign(
    targets=[Name(
      id='x_train',
      ctx=Store())],
    value=BinOp(
      left=Call(
        func=Attribute(
          value=Name(
            id='x_train',
            ctx=Load()),
          attr='astype',
          ctx=Load()),
        args=[Str(s='float32')],
        keywords=[]),
      op=Div(),
      right=Num(n=255))),
  Assign(
    targets=[Name(
      id='x_test',
      ctx=Store())],
    value=BinOp(
      left=Call(
        func=Attribute(
          value=Name(
            id='x_test',
            ctx=Load()),
          attr='astype',
          ctx=Load()),
        args=[Str(s='float32')],
        keywords=[]),
      op=Div(),
      right=Num(n=255))),
  If(
    test=Name(
      id='subtract_pixel_mean',
      ctx=Load()),
    body=[
      Assign(
        targets=[Name(
          id='x_train_mean',
          ctx=Store())],
        value=Call(
          func=Attribute(
            value=Name(
              id='np',
              ctx=Load()),
            attr='mean',
            ctx=Load()),
          args=[Name(
            id='x_train',
            ctx=Load())],
          keywords=[keyword(
            arg='axis',
            value=Num(n=0))])),
      AugAssign(
        target=Name(
          id='x_train',
          ctx=Store()),
        op=Sub(),
        value=Name(
          id='x_train_mean',
          ctx=Load())),
      AugAssign(
        target=Name(
          id='x_test',
          ctx=Store()),
        op=Sub(),
        value=Name(
          id='x_train_mean',
          ctx=Load()))],
    orelse=[]),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[
      Str(s='x_train shape:'),
      Attribute(
        value=Name(
          id='x_train',
          ctx=Load()),
        attr='shape',
        ctx=Load())],
    keywords=[])),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[
      Subscript(
        value=Attribute(
          value=Name(
            id='x_train',
            ctx=Load()),
          attr='shape',
          ctx=Load()),
        slice=Index(value=Num(n=0)),
        ctx=Load()),
      Str(s='train samples')],
    keywords=[])),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[
      Subscript(
        value=Attribute(
          value=Name(
            id='x_test',
            ctx=Load()),
          attr='shape',
          ctx=Load()),
        slice=Index(value=Num(n=0)),
        ctx=Load()),
      Str(s='test samples')],
    keywords=[])),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[
      Str(s='y_train shape:'),
      Attribute(
        value=Name(
          id='y_train',
          ctx=Load()),
        attr='shape',
        ctx=Load())],
    keywords=[])),
  Assign(
    targets=[Name(
      id='y_train',
      ctx=Store())],
    value=Call(
      func=Attribute(
        value=Attribute(
          value=Name(
            id='keras',
            ctx=Load()),
          attr='utils',
          ctx=Load()),
        attr='to_categorical',
        ctx=Load()),
      args=[
        Name(
          id='y_train',
          ctx=Load()),
        Name(
          id='num_classes',
          ctx=Load())],
      keywords=[])),
  Assign(
    targets=[Name(
      id='y_test',
      ctx=Store())],
    value=Call(
      func=Attribute(
        value=Attribute(
          value=Name(
            id='keras',
            ctx=Load()),
          attr='utils',
          ctx=Load()),
        attr='to_categorical',
        ctx=Load()),
      args=[
        Name(
          id='y_test',
          ctx=Load()),
        Name(
          id='num_classes',
          ctx=Load())],
      keywords=[])),
  FunctionDef(
    name='lr_schedule',
    args=arguments(
      args=[arg(
        arg='epoch',
        annotation=None)],
      vararg=None,
      kwonlyargs=[],
      kw_defaults=[],
      kwarg=None,
      defaults=[]),
    body=[
      Expr(value=Str(s='Learning Rate Schedule\n    Learning rate is scheduled to be reduced after 80, 120, 160, 180 epochs.\n    Called automatically every epoch as part of callbacks during training.\n    # Arguments\n        epoch (int): The number of epochs\n    # Returns\n        lr (float32): learning rate\n    ')),
      Assign(
        targets=[Name(
          id='lr',
          ctx=Store())],
        value=Num(n=0.001)),
      If(
        test=Compare(
          left=Name(
            id='epoch',
            ctx=Load()),
          ops=[Gt()],
          comparators=[Num(n=180)]),
        body=[AugAssign(
          target=Name(
            id='lr',
            ctx=Store()),
          op=Mult(),
          value=Num(n=0.0005))],
        orelse=[If(
          test=Compare(
            left=Name(
              id='epoch',
              ctx=Load()),
            ops=[Gt()],
            comparators=[Num(n=160)]),
          body=[AugAssign(
            target=Name(
              id='lr',
              ctx=Store()),
            op=Mult(),
            value=Num(n=0.001))],
          orelse=[If(
            test=Compare(
              left=Name(
                id='epoch',
                ctx=Load()),
              ops=[Gt()],
              comparators=[Num(n=120)]),
            body=[AugAssign(
              target=Name(
                id='lr',
                ctx=Store()),
              op=Mult(),
              value=Num(n=0.01))],
            orelse=[If(
              test=Compare(
                left=Name(
                  id='epoch',
                  ctx=Load()),
                ops=[Gt()],
                comparators=[Num(n=80)]),
              body=[AugAssign(
                target=Name(
                  id='lr',
                  ctx=Store()),
                op=Mult(),
                value=Num(n=0.1))],
              orelse=[])])])]),
      Expr(value=Call(
        func=Name(
          id='print',
          ctx=Load()),
        args=[
          Str(s='Learning rate: '),
          Name(
            id='lr',
            ctx=Load())],
        keywords=[])),
      Return(value=Name(
        id='lr',
        ctx=Load()))],
    decorator_list=[],
    returns=None),
  FunctionDef(
    name='resnet_layer',
    args=arguments(
      args=[
        arg(
          arg='inputs',
          annotation=None),
        arg(
          arg='num_filters',
          annotation=None),
        arg(
          arg='kernel_size',
          annotation=None),
        arg(
          arg='strides',
          annotation=None),
        arg(
          arg='activation',
          annotation=None),
        arg(
          arg='batch_normalization',
          annotation=None),
        arg(
          arg='conv_first',
          annotation=None)],
      vararg=None,
      kwonlyargs=[],
      kw_defaults=[],
      kwarg=None,
      defaults=[
        Num(n=16),
        Num(n=3),
        Num(n=1),
        Str(s='relu'),
        NameConstant(value=True),
        NameConstant(value=True)]),
    body=[
      Expr(value=Str(s='2D Convolution-Batch Normalization-Activation stack builder\n    # Arguments\n        inputs (tensor): input tensor from input image or previous layer\n        num_filters (int): Conv2D number of filters\n        kernel_size (int): Conv2D square kernel dimensions\n        strides (int): Conv2D square stride dimensions\n        activation (string): activation name\n        batch_normalization (bool): whether to include batch normalization\n        conv_first (bool): conv-bn-activation (True) or\n            bn-activation-conv (False)\n    # Returns\n        x (tensor): tensor as input to the next layer\n    ')),
      Assign(
        targets=[Name(
          id='conv',
          ctx=Store())],
        value=Call(
          func=Name(
            id='Conv2D',
            ctx=Load()),
          args=[Name(
            id='num_filters',
            ctx=Load())],
          keywords=[
            keyword(
              arg='kernel_size',
              value=Name(
                id='kernel_size',
                ctx=Load())),
            keyword(
              arg='strides',
              value=Name(
                id='strides',
                ctx=Load())),
            keyword(
              arg='padding',
              value=Str(s='same')),
            keyword(
              arg='kernel_initializer',
              value=Str(s='he_normal')),
            keyword(
              arg='kernel_regularizer',
              value=Call(
                func=Name(
                  id='l2',
                  ctx=Load()),
                args=[Num(n=0.0001)],
                keywords=[]))])),
      Assign(
        targets=[Name(
          id='x',
          ctx=Store())],
        value=Name(
          id='inputs',
          ctx=Load())),
      If(
        test=Name(
          id='conv_first',
          ctx=Load()),
        body=[
          Assign(
            targets=[Name(
              id='x',
              ctx=Store())],
            value=Call(
              func=Name(
                id='conv',
                ctx=Load()),
              args=[Name(
                id='x',
                ctx=Load())],
              keywords=[])),
          If(
            test=Name(
              id='batch_normalization',
              ctx=Load()),
            body=[Assign(
              targets=[Name(
                id='x',
                ctx=Store())],
              value=Call(
                func=Call(
                  func=Name(
                    id='BatchNormalization',
                    ctx=Load()),
                  args=[],
                  keywords=[]),
                args=[Name(
                  id='x',
                  ctx=Load())],
                keywords=[]))],
            orelse=[]),
          If(
            test=Compare(
              left=Name(
                id='activation',
                ctx=Load()),
              ops=[IsNot()],
              comparators=[NameConstant(value=None)]),
            body=[Assign(
              targets=[Name(
                id='x',
                ctx=Store())],
              value=Call(
                func=Call(
                  func=Name(
                    id='Activation',
                    ctx=Load()),
                  args=[Name(
                    id='activation',
                    ctx=Load())],
                  keywords=[]),
                args=[Name(
                  id='x',
                  ctx=Load())],
                keywords=[]))],
            orelse=[])],
        orelse=[
          If(
            test=Name(
              id='batch_normalization',
              ctx=Load()),
            body=[Assign(
              targets=[Name(
                id='x',
                ctx=Store())],
              value=Call(
                func=Call(
                  func=Name(
                    id='BatchNormalization',
                    ctx=Load()),
                  args=[],
                  keywords=[]),
                args=[Name(
                  id='x',
                  ctx=Load())],
                keywords=[]))],
            orelse=[]),
          If(
            test=Compare(
              left=Name(
                id='activation',
                ctx=Load()),
              ops=[IsNot()],
              comparators=[NameConstant(value=None)]),
            body=[Assign(
              targets=[Name(
                id='x',
                ctx=Store())],
              value=Call(
                func=Call(
                  func=Name(
                    id='Activation',
                    ctx=Load()),
                  args=[Name(
                    id='activation',
                    ctx=Load())],
                  keywords=[]),
                args=[Name(
                  id='x',
                  ctx=Load())],
                keywords=[]))],
            orelse=[]),
          Assign(
            targets=[Name(
              id='x',
              ctx=Store())],
            value=Call(
              func=Name(
                id='conv',
                ctx=Load()),
              args=[Name(
                id='x',
                ctx=Load())],
              keywords=[]))]),
      Return(value=Name(
        id='x',
        ctx=Load()))],
    decorator_list=[],
    returns=None),
  FunctionDef(
    name='resnet_v1',
    args=arguments(
      args=[
        arg(
          arg='input_shape',
          annotation=None),
        arg(
          arg='depth',
          annotation=None),
        arg(
          arg='num_classes',
          annotation=None)],
      vararg=None,
      kwonlyargs=[],
      kw_defaults=[],
      kwarg=None,
      defaults=[Num(n=10)]),
    body=[
      Expr(value=Str(s='ResNet Version 1 Model builder [a]\n    Stacks of 2 x (3 x 3) Conv2D-BN-ReLU\n    Last ReLU is after the shortcut connection.\n    At the beginning of each stage, the feature map size is halved (downsampled)\n    by a convolutional layer with strides=2, while the number of filters is\n    doubled. Within each stage, the layers have the same number filters and the\n    same number of filters.\n    Features maps sizes:\n    stage 0: 32x32, 16\n    stage 1: 16x16, 32\n    stage 2:  8x8,  64\n    The Number of parameters is approx the same as Table 6 of [a]:\n    ResNet20 0.27M\n    ResNet32 0.46M\n    ResNet44 0.66M\n    ResNet56 0.85M\n    ResNet110 1.7M\n    # Arguments\n        input_shape (tensor): shape of input image tensor\n        depth (int): number of core convolutional layers\n        num_classes (int): number of classes (CIFAR10 has 10)\n    # Returns\n        model (Model): Keras model instance\n    ')),
      If(
        test=Compare(
          left=BinOp(
            left=BinOp(
              left=Name(
                id='depth',
                ctx=Load()),
              op=Sub(),
              right=Num(n=2)),
            op=Mod(),
            right=Num(n=6)),
          ops=[NotEq()],
          comparators=[Num(n=0)]),
        body=[Raise(
          exc=Call(
            func=Name(
              id='ValueError',
              ctx=Load()),
            args=[Str(s='depth should be 6n+2 (eg 20, 32, 44 in [a])')],
            keywords=[]),
          cause=None)],
        orelse=[]),
      Assign(
        targets=[Name(
          id='num_filters',
          ctx=Store())],
        value=Num(n=16)),
      Assign(
        targets=[Name(
          id='num_res_blocks',
          ctx=Store())],
        value=Call(
          func=Name(
            id='int',
            ctx=Load()),
          args=[BinOp(
            left=BinOp(
              left=Name(
                id='depth',
                ctx=Load()),
              op=Sub(),
              right=Num(n=2)),
            op=Div(),
            right=Num(n=6))],
          keywords=[])),
      Assign(
        targets=[Name(
          id='inputs',
          ctx=Store())],
        value=Call(
          func=Name(
            id='Input',
            ctx=Load()),
          args=[],
          keywords=[keyword(
            arg='shape',
            value=Name(
              id='input_shape',
              ctx=Load()))])),
      Assign(
        targets=[Name(
          id='x',
          ctx=Store())],
        value=Call(
          func=Name(
            id='resnet_layer',
            ctx=Load()),
          args=[],
          keywords=[keyword(
            arg='inputs',
            value=Name(
              id='inputs',
              ctx=Load()))])),
      For(
        target=Name(
          id='stack',
          ctx=Store()),
        iter=Call(
          func=Name(
            id='range',
            ctx=Load()),
          args=[Num(n=3)],
          keywords=[]),
        body=[
          For(
            target=Name(
              id='res_block',
              ctx=Store()),
            iter=Call(
              func=Name(
                id='range',
                ctx=Load()),
              args=[Name(
                id='num_res_blocks',
                ctx=Load())],
              keywords=[]),
            body=[
              Assign(
                targets=[Name(
                  id='strides',
                  ctx=Store())],
                value=Num(n=1)),
              If(
                test=BoolOp(
                  op=And(),
                  values=[
                    Compare(
                      left=Name(
                        id='stack',
                        ctx=Load()),
                      ops=[Gt()],
                      comparators=[Num(n=0)]),
                    Compare(
                      left=Name(
                        id='res_block',
                        ctx=Load()),
                      ops=[Eq()],
                      comparators=[Num(n=0)])]),
                body=[Assign(
                  targets=[Name(
                    id='strides',
                    ctx=Store())],
                  value=Num(n=2))],
                orelse=[]),
              Assign(
                targets=[Name(
                  id='y',
                  ctx=Store())],
                value=Call(
                  func=Name(
                    id='resnet_layer',
                    ctx=Load()),
                  args=[],
                  keywords=[
                    keyword(
                      arg='inputs',
                      value=Name(
                        id='x',
                        ctx=Load())),
                    keyword(
                      arg='num_filters',
                      value=Name(
                        id='num_filters',
                        ctx=Load())),
                    keyword(
                      arg='strides',
                      value=Name(
                        id='strides',
                        ctx=Load()))])),
              Assign(
                targets=[Name(
                  id='y',
                  ctx=Store())],
                value=Call(
                  func=Name(
                    id='resnet_layer',
                    ctx=Load()),
                  args=[],
                  keywords=[
                    keyword(
                      arg='inputs',
                      value=Name(
                        id='y',
                        ctx=Load())),
                    keyword(
                      arg='num_filters',
                      value=Name(
                        id='num_filters',
                        ctx=Load())),
                    keyword(
                      arg='activation',
                      value=NameConstant(value=None))])),
              If(
                test=BoolOp(
                  op=And(),
                  values=[
                    Compare(
                      left=Name(
                        id='stack',
                        ctx=Load()),
                      ops=[Gt()],
                      comparators=[Num(n=0)]),
                    Compare(
                      left=Name(
                        id='res_block',
                        ctx=Load()),
                      ops=[Eq()],
                      comparators=[Num(n=0)])]),
                body=[Assign(
                  targets=[Name(
                    id='x',
                    ctx=Store())],
                  value=Call(
                    func=Name(
                      id='resnet_layer',
                      ctx=Load()),
                    args=[],
                    keywords=[
                      keyword(
                        arg='inputs',
                        value=Name(
                          id='x',
                          ctx=Load())),
                      keyword(
                        arg='num_filters',
                        value=Name(
                          id='num_filters',
                          ctx=Load())),
                      keyword(
                        arg='kernel_size',
                        value=Num(n=1)),
                      keyword(
                        arg='strides',
                        value=Name(
                          id='strides',
                          ctx=Load())),
                      keyword(
                        arg='activation',
                        value=NameConstant(value=None)),
                      keyword(
                        arg='batch_normalization',
                        value=NameConstant(value=False))]))],
                orelse=[]),
              Assign(
                targets=[Name(
                  id='x',
                  ctx=Store())],
                value=Call(
                  func=Attribute(
                    value=Attribute(
                      value=Name(
                        id='keras',
                        ctx=Load()),
                      attr='layers',
                      ctx=Load()),
                    attr='add',
                    ctx=Load()),
                  args=[List(
                    elts=[
                      Name(
                        id='x',
                        ctx=Load()),
                      Name(
                        id='y',
                        ctx=Load())],
                    ctx=Load())],
                  keywords=[])),
              Assign(
                targets=[Name(
                  id='x',
                  ctx=Store())],
                value=Call(
                  func=Call(
                    func=Name(
                      id='Activation',
                      ctx=Load()),
                    args=[Str(s='relu')],
                    keywords=[]),
                  args=[Name(
                    id='x',
                    ctx=Load())],
                  keywords=[]))],
            orelse=[]),
          AugAssign(
            target=Name(
              id='num_filters',
              ctx=Store()),
            op=Mult(),
            value=Num(n=2))],
        orelse=[]),
      Assign(
        targets=[Name(
          id='x',
          ctx=Store())],
        value=Call(
          func=Call(
            func=Name(
              id='AveragePooling2D',
              ctx=Load()),
            args=[],
            keywords=[keyword(
              arg='pool_size',
              value=Num(n=8))]),
          args=[Name(
            id='x',
            ctx=Load())],
          keywords=[])),
      Assign(
        targets=[Name(
          id='y',
          ctx=Store())],
        value=Call(
          func=Call(
            func=Name(
              id='Flatten',
              ctx=Load()),
            args=[],
            keywords=[]),
          args=[Name(
            id='x',
            ctx=Load())],
          keywords=[])),
      Assign(
        targets=[Name(
          id='outputs',
          ctx=Store())],
        value=Call(
          func=Call(
            func=Name(
              id='Dense',
              ctx=Load()),
            args=[Name(
              id='num_classes',
              ctx=Load())],
            keywords=[
              keyword(
                arg='activation',
                value=Str(s='softmax')),
              keyword(
                arg='kernel_initializer',
                value=Str(s='he_normal'))]),
          args=[Name(
            id='y',
            ctx=Load())],
          keywords=[])),
      Assign(
        targets=[Name(
          id='model',
          ctx=Store())],
        value=Call(
          func=Name(
            id='Model',
            ctx=Load()),
          args=[],
          keywords=[
            keyword(
              arg='inputs',
              value=Name(
                id='inputs',
                ctx=Load())),
            keyword(
              arg='outputs',
              value=Name(
                id='outputs',
                ctx=Load()))])),
      Return(value=Name(
        id='model',
        ctx=Load()))],
    decorator_list=[],
    returns=None),
  FunctionDef(
    name='resnet_v2',
    args=arguments(
      args=[
        arg(
          arg='input_shape',
          annotation=None),
        arg(
          arg='depth',
          annotation=None),
        arg(
          arg='num_classes',
          annotation=None)],
      vararg=None,
      kwonlyargs=[],
      kw_defaults=[],
      kwarg=None,
      defaults=[Num(n=10)]),
    body=[
      Expr(value=Str(s='ResNet Version 2 Model builder [b]\n    Stacks of (1 x 1)-(3 x 3)-(1 x 1) BN-ReLU-Conv2D or also known as\n    bottleneck layer\n    First shortcut connection per layer is 1 x 1 Conv2D.\n    Second and onwards shortcut connection is identity.\n    At the beginning of each stage, the feature map size is halved (downsampled)\n    by a convolutional layer with strides=2, while the number of filter maps is\n    doubled. Within each stage, the layers have the same number filters and the\n    same filter map sizes.\n    Features maps sizes:\n    conv1  : 32x32,  16\n    stage 0: 32x32,  64\n    stage 1: 16x16, 128\n    stage 2:  8x8,  256\n    # Arguments\n        input_shape (tensor): shape of input image tensor\n        depth (int): number of core convolutional layers\n        num_classes (int): number of classes (CIFAR10 has 10)\n    # Returns\n        model (Model): Keras model instance\n    ')),
      If(
        test=Compare(
          left=BinOp(
            left=BinOp(
              left=Name(
                id='depth',
                ctx=Load()),
              op=Sub(),
              right=Num(n=2)),
            op=Mod(),
            right=Num(n=9)),
          ops=[NotEq()],
          comparators=[Num(n=0)]),
        body=[Raise(
          exc=Call(
            func=Name(
              id='ValueError',
              ctx=Load()),
            args=[Str(s='depth should be 9n+2 (eg 56 or 110 in [b])')],
            keywords=[]),
          cause=None)],
        orelse=[]),
      Assign(
        targets=[Name(
          id='num_filters_in',
          ctx=Store())],
        value=Num(n=16)),
      Assign(
        targets=[Name(
          id='num_res_blocks',
          ctx=Store())],
        value=Call(
          func=Name(
            id='int',
            ctx=Load()),
          args=[BinOp(
            left=BinOp(
              left=Name(
                id='depth',
                ctx=Load()),
              op=Sub(),
              right=Num(n=2)),
            op=Div(),
            right=Num(n=9))],
          keywords=[])),
      Assign(
        targets=[Name(
          id='inputs',
          ctx=Store())],
        value=Call(
          func=Name(
            id='Input',
            ctx=Load()),
          args=[],
          keywords=[keyword(
            arg='shape',
            value=Name(
              id='input_shape',
              ctx=Load()))])),
      Assign(
        targets=[Name(
          id='x',
          ctx=Store())],
        value=Call(
          func=Name(
            id='resnet_layer',
            ctx=Load()),
          args=[],
          keywords=[
            keyword(
              arg='inputs',
              value=Name(
                id='inputs',
                ctx=Load())),
            keyword(
              arg='num_filters',
              value=Name(
                id='num_filters_in',
                ctx=Load())),
            keyword(
              arg='conv_first',
              value=NameConstant(value=True))])),
      For(
        target=Name(
          id='stage',
          ctx=Store()),
        iter=Call(
          func=Name(
            id='range',
            ctx=Load()),
          args=[Num(n=3)],
          keywords=[]),
        body=[
          For(
            target=Name(
              id='res_block',
              ctx=Store()),
            iter=Call(
              func=Name(
                id='range',
                ctx=Load()),
              args=[Name(
                id='num_res_blocks',
                ctx=Load())],
              keywords=[]),
            body=[
              Assign(
                targets=[Name(
                  id='activation',
                  ctx=Store())],
                value=Str(s='relu')),
              Assign(
                targets=[Name(
                  id='batch_normalization',
                  ctx=Store())],
                value=NameConstant(value=True)),
              Assign(
                targets=[Name(
                  id='strides',
                  ctx=Store())],
                value=Num(n=1)),
              If(
                test=Compare(
                  left=Name(
                    id='stage',
                    ctx=Load()),
                  ops=[Eq()],
                  comparators=[Num(n=0)]),
                body=[
                  Assign(
                    targets=[Name(
                      id='num_filters_out',
                      ctx=Store())],
                    value=BinOp(
                      left=Name(
                        id='num_filters_in',
                        ctx=Load()),
                      op=Mult(),
                      right=Num(n=4))),
                  If(
                    test=Compare(
                      left=Name(
                        id='res_block',
                        ctx=Load()),
                      ops=[Eq()],
                      comparators=[Num(n=0)]),
                    body=[
                      Assign(
                        targets=[Name(
                          id='activation',
                          ctx=Store())],
                        value=NameConstant(value=None)),
                      Assign(
                        targets=[Name(
                          id='batch_normalization',
                          ctx=Store())],
                        value=NameConstant(value=False))],
                    orelse=[])],
                orelse=[
                  Assign(
                    targets=[Name(
                      id='num_filters_out',
                      ctx=Store())],
                    value=BinOp(
                      left=Name(
                        id='num_filters_in',
                        ctx=Load()),
                      op=Mult(),
                      right=Num(n=2))),
                  If(
                    test=Compare(
                      left=Name(
                        id='res_block',
                        ctx=Load()),
                      ops=[Eq()],
                      comparators=[Num(n=0)]),
                    body=[Assign(
                      targets=[Name(
                        id='strides',
                        ctx=Store())],
                      value=Num(n=2))],
                    orelse=[])]),
              Assign(
                targets=[Name(
                  id='y',
                  ctx=Store())],
                value=Call(
                  func=Name(
                    id='resnet_layer',
                    ctx=Load()),
                  args=[],
                  keywords=[
                    keyword(
                      arg='inputs',
                      value=Name(
                        id='x',
                        ctx=Load())),
                    keyword(
                      arg='num_filters',
                      value=Name(
                        id='num_filters_in',
                        ctx=Load())),
                    keyword(
                      arg='kernel_size',
                      value=Num(n=1)),
                    keyword(
                      arg='strides',
                      value=Name(
                        id='strides',
                        ctx=Load())),
                    keyword(
                      arg='activation',
                      value=Name(
                        id='activation',
                        ctx=Load())),
                    keyword(
                      arg='batch_normalization',
                      value=Name(
                        id='batch_normalization',
                        ctx=Load())),
                    keyword(
                      arg='conv_first',
                      value=NameConstant(value=False))])),
              Assign(
                targets=[Name(
                  id='y',
                  ctx=Store())],
                value=Call(
                  func=Name(
                    id='resnet_layer',
                    ctx=Load()),
                  args=[],
                  keywords=[
                    keyword(
                      arg='inputs',
                      value=Name(
                        id='y',
                        ctx=Load())),
                    keyword(
                      arg='num_filters',
                      value=Name(
                        id='num_filters_in',
                        ctx=Load())),
                    keyword(
                      arg='conv_first',
                      value=NameConstant(value=False))])),
              Assign(
                targets=[Name(
                  id='y',
                  ctx=Store())],
                value=Call(
                  func=Name(
                    id='resnet_layer',
                    ctx=Load()),
                  args=[],
                  keywords=[
                    keyword(
                      arg='inputs',
                      value=Name(
                        id='y',
                        ctx=Load())),
                    keyword(
                      arg='num_filters',
                      value=Name(
                        id='num_filters_out',
                        ctx=Load())),
                    keyword(
                      arg='kernel_size',
                      value=Num(n=1)),
                    keyword(
                      arg='conv_first',
                      value=NameConstant(value=False))])),
              If(
                test=Compare(
                  left=Name(
                    id='res_block',
                    ctx=Load()),
                  ops=[Eq()],
                  comparators=[Num(n=0)]),
                body=[Assign(
                  targets=[Name(
                    id='x',
                    ctx=Store())],
                  value=Call(
                    func=Name(
                      id='resnet_layer',
                      ctx=Load()),
                    args=[],
                    keywords=[
                      keyword(
                        arg='inputs',
                        value=Name(
                          id='x',
                          ctx=Load())),
                      keyword(
                        arg='num_filters',
                        value=Name(
                          id='num_filters_out',
                          ctx=Load())),
                      keyword(
                        arg='kernel_size',
                        value=Num(n=1)),
                      keyword(
                        arg='strides',
                        value=Name(
                          id='strides',
                          ctx=Load())),
                      keyword(
                        arg='activation',
                        value=NameConstant(value=None)),
                      keyword(
                        arg='batch_normalization',
                        value=NameConstant(value=False))]))],
                orelse=[]),
              Assign(
                targets=[Name(
                  id='x',
                  ctx=Store())],
                value=Call(
                  func=Attribute(
                    value=Attribute(
                      value=Name(
                        id='keras',
                        ctx=Load()),
                      attr='layers',
                      ctx=Load()),
                    attr='add',
                    ctx=Load()),
                  args=[List(
                    elts=[
                      Name(
                        id='x',
                        ctx=Load()),
                      Name(
                        id='y',
                        ctx=Load())],
                    ctx=Load())],
                  keywords=[]))],
            orelse=[]),
          Assign(
            targets=[Name(
              id='num_filters_in',
              ctx=Store())],
            value=Name(
              id='num_filters_out',
              ctx=Load()))],
        orelse=[]),
      Assign(
        targets=[Name(
          id='x',
          ctx=Store())],
        value=Call(
          func=Call(
            func=Name(
              id='BatchNormalization',
              ctx=Load()),
            args=[],
            keywords=[]),
          args=[Name(
            id='x',
            ctx=Load())],
          keywords=[])),
      Assign(
        targets=[Name(
          id='x',
          ctx=Store())],
        value=Call(
          func=Call(
            func=Name(
              id='Activation',
              ctx=Load()),
            args=[Str(s='relu')],
            keywords=[]),
          args=[Name(
            id='x',
            ctx=Load())],
          keywords=[])),
      Assign(
        targets=[Name(
          id='x',
          ctx=Store())],
        value=Call(
          func=Call(
            func=Name(
              id='AveragePooling2D',
              ctx=Load()),
            args=[],
            keywords=[keyword(
              arg='pool_size',
              value=Num(n=8))]),
          args=[Name(
            id='x',
            ctx=Load())],
          keywords=[])),
      Assign(
        targets=[Name(
          id='y',
          ctx=Store())],
        value=Call(
          func=Call(
            func=Name(
              id='Flatten',
              ctx=Load()),
            args=[],
            keywords=[]),
          args=[Name(
            id='x',
            ctx=Load())],
          keywords=[])),
      Assign(
        targets=[Name(
          id='outputs',
          ctx=Store())],
        value=Call(
          func=Call(
            func=Name(
              id='Dense',
              ctx=Load()),
            args=[Name(
              id='num_classes',
              ctx=Load())],
            keywords=[
              keyword(
                arg='activation',
                value=Str(s='softmax')),
              keyword(
                arg='kernel_initializer',
                value=Str(s='he_normal'))]),
          args=[Name(
            id='y',
            ctx=Load())],
          keywords=[])),
      Assign(
        targets=[Name(
          id='model',
          ctx=Store())],
        value=Call(
          func=Name(
            id='Model',
            ctx=Load()),
          args=[],
          keywords=[
            keyword(
              arg='inputs',
              value=Name(
                id='inputs',
                ctx=Load())),
            keyword(
              arg='outputs',
              value=Name(
                id='outputs',
                ctx=Load()))])),
      Return(value=Name(
        id='model',
        ctx=Load()))],
    decorator_list=[],
    returns=None),
  If(
    test=Compare(
      left=Name(
        id='version',
        ctx=Load()),
      ops=[Eq()],
      comparators=[Num(n=2)]),
    body=[Assign(
      targets=[Name(
        id='model',
        ctx=Store())],
      value=Call(
        func=Name(
          id='resnet_v2',
          ctx=Load()),
        args=[],
        keywords=[
          keyword(
            arg='input_shape',
            value=Name(
              id='input_shape',
              ctx=Load())),
          keyword(
            arg='depth',
            value=Name(
              id='depth',
              ctx=Load()))]))],
    orelse=[Assign(
      targets=[Name(
        id='model',
        ctx=Store())],
      value=Call(
        func=Name(
          id='resnet_v1',
          ctx=Load()),
        args=[],
        keywords=[
          keyword(
            arg='input_shape',
            value=Name(
              id='input_shape',
              ctx=Load())),
          keyword(
            arg='depth',
            value=Name(
              id='depth',
              ctx=Load()))]))]),
  Expr(value=Call(
    func=Attribute(
      value=Name(
        id='model',
        ctx=Load()),
      attr='compile',
      ctx=Load()),
    args=[],
    keywords=[
      keyword(
        arg='loss',
        value=Str(s='categorical_crossentropy')),
      keyword(
        arg='optimizer',
        value=Call(
          func=Name(
            id='Adam',
            ctx=Load()),
          args=[],
          keywords=[keyword(
            arg='learning_rate',
            value=Call(
              func=Name(
                id='lr_schedule',
                ctx=Load()),
              args=[Num(n=0)],
              keywords=[]))])),
      keyword(
        arg='metrics',
        value=List(
          elts=[Str(s='accuracy')],
          ctx=Load()))])),
  Expr(value=Call(
    func=Attribute(
      value=Name(
        id='model',
        ctx=Load()),
      attr='summary',
      ctx=Load()),
    args=[],
    keywords=[])),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[Name(
      id='model_type',
      ctx=Load())],
    keywords=[])),
  Assign(
    targets=[Name(
      id='save_dir',
      ctx=Store())],
    value=Call(
      func=Attribute(
        value=Attribute(
          value=Name(
            id='os',
            ctx=Load()),
          attr='path',
          ctx=Load()),
        attr='join',
        ctx=Load()),
      args=[
        Call(
          func=Attribute(
            value=Name(
              id='os',
              ctx=Load()),
            attr='getcwd',
            ctx=Load()),
          args=[],
          keywords=[]),
        Str(s='saved_models')],
      keywords=[])),
  Assign(
    targets=[Name(
      id='model_name',
      ctx=Store())],
    value=BinOp(
      left=Str(s='cifar10_%s_model.{epoch:03d}.h5'),
      op=Mod(),
      right=Name(
        id='model_type',
        ctx=Load()))),
  If(
    test=UnaryOp(
      op=Not(),
      operand=Call(
        func=Attribute(
          value=Attribute(
            value=Name(
              id='os',
              ctx=Load()),
            attr='path',
            ctx=Load()),
          attr='isdir',
          ctx=Load()),
        args=[Name(
          id='save_dir',
          ctx=Load())],
        keywords=[])),
    body=[Expr(value=Call(
      func=Attribute(
        value=Name(
          id='os',
          ctx=Load()),
        attr='makedirs',
        ctx=Load()),
      args=[Name(
        id='save_dir',
        ctx=Load())],
      keywords=[]))],
    orelse=[]),
  Assign(
    targets=[Name(
      id='filepath',
      ctx=Store())],
    value=Call(
      func=Attribute(
        value=Attribute(
          value=Name(
            id='os',
            ctx=Load()),
          attr='path',
          ctx=Load()),
        attr='join',
        ctx=Load()),
      args=[
        Name(
          id='save_dir',
          ctx=Load()),
        Name(
          id='model_name',
          ctx=Load())],
      keywords=[])),
  Assign(
    targets=[Name(
      id='checkpoint',
      ctx=Store())],
    value=Call(
      func=Name(
        id='ModelCheckpoint',
        ctx=Load()),
      args=[],
      keywords=[
        keyword(
          arg='filepath',
          value=Name(
            id='filepath',
            ctx=Load())),
        keyword(
          arg='monitor',
          value=Str(s='val_acc')),
        keyword(
          arg='verbose',
          value=Num(n=1)),
        keyword(
          arg='save_best_only',
          value=NameConstant(value=True))])),
  Assign(
    targets=[Name(
      id='lr_scheduler',
      ctx=Store())],
    value=Call(
      func=Name(
        id='LearningRateScheduler',
        ctx=Load()),
      args=[Name(
        id='lr_schedule',
        ctx=Load())],
      keywords=[])),
  Assign(
    targets=[Name(
      id='lr_reducer',
      ctx=Store())],
    value=Call(
      func=Name(
        id='ReduceLROnPlateau',
        ctx=Load()),
      args=[],
      keywords=[
        keyword(
          arg='factor',
          value=Call(
            func=Attribute(
              value=Name(
                id='np',
                ctx=Load()),
              attr='sqrt',
              ctx=Load()),
            args=[Num(n=0.1)],
            keywords=[])),
        keyword(
          arg='cooldown',
          value=Num(n=0)),
        keyword(
          arg='patience',
          value=Num(n=5)),
        keyword(
          arg='min_lr',
          value=Num(n=5e-07))])),
  Assign(
    targets=[Name(
      id='callbacks',
      ctx=Store())],
    value=List(
      elts=[
        Name(
          id='checkpoint',
          ctx=Load()),
        Name(
          id='lr_reducer',
          ctx=Load()),
        Name(
          id='lr_scheduler',
          ctx=Load())],
      ctx=Load())),
  If(
    test=UnaryOp(
      op=Not(),
      operand=Name(
        id='data_augmentation',
        ctx=Load())),
    body=[
      Expr(value=Call(
        func=Name(
          id='print',
          ctx=Load()),
        args=[Str(s='Not using data augmentation.')],
        keywords=[])),
      Expr(value=Call(
        func=Attribute(
          value=Name(
            id='model',
            ctx=Load()),
          attr='fit',
          ctx=Load()),
        args=[
          Name(
            id='x_train',
            ctx=Load()),
          Name(
            id='y_train',
            ctx=Load())],
        keywords=[
          keyword(
            arg='batch_size',
            value=Name(
              id='batch_size',
              ctx=Load())),
          keyword(
            arg='epochs',
            value=Name(
              id='epochs',
              ctx=Load())),
          keyword(
            arg='validation_data',
            value=Tuple(
              elts=[
                Name(
                  id='x_test',
                  ctx=Load()),
                Name(
                  id='y_test',
                  ctx=Load())],
              ctx=Load())),
          keyword(
            arg='shuffle',
            value=NameConstant(value=True)),
          keyword(
            arg='callbacks',
            value=Name(
              id='callbacks',
              ctx=Load()))]))],
    orelse=[
      Expr(value=Call(
        func=Name(
          id='print',
          ctx=Load()),
        args=[Str(s='Using real-time data augmentation.')],
        keywords=[])),
      Assign(
        targets=[Name(
          id='datagen',
          ctx=Store())],
        value=Call(
          func=Name(
            id='ImageDataGenerator',
            ctx=Load()),
          args=[],
          keywords=[
            keyword(
              arg='featurewise_center',
              value=NameConstant(value=False)),
            keyword(
              arg='samplewise_center',
              value=NameConstant(value=False)),
            keyword(
              arg='featurewise_std_normalization',
              value=NameConstant(value=False)),
            keyword(
              arg='samplewise_std_normalization',
              value=NameConstant(value=False)),
            keyword(
              arg='zca_whitening',
              value=NameConstant(value=False)),
            keyword(
              arg='zca_epsilon',
              value=Num(n=1e-06)),
            keyword(
              arg='rotation_range',
              value=Num(n=0)),
            keyword(
              arg='width_shift_range',
              value=Num(n=0.1)),
            keyword(
              arg='height_shift_range',
              value=Num(n=0.1)),
            keyword(
              arg='shear_range',
              value=Num(n=0.0)),
            keyword(
              arg='zoom_range',
              value=Num(n=0.0)),
            keyword(
              arg='channel_shift_range',
              value=Num(n=0.0)),
            keyword(
              arg='fill_mode',
              value=Str(s='nearest')),
            keyword(
              arg='cval',
              value=Num(n=0.0)),
            keyword(
              arg='horizontal_flip',
              value=NameConstant(value=True)),
            keyword(
              arg='vertical_flip',
              value=NameConstant(value=False)),
            keyword(
              arg='rescale',
              value=NameConstant(value=None)),
            keyword(
              arg='preprocessing_function',
              value=NameConstant(value=None)),
            keyword(
              arg='data_format',
              value=NameConstant(value=None)),
            keyword(
              arg='validation_split',
              value=Num(n=0.0))])),
      Expr(value=Call(
        func=Attribute(
          value=Name(
            id='datagen',
            ctx=Load()),
          attr='fit',
          ctx=Load()),
        args=[Name(
          id='x_train',
          ctx=Load())],
        keywords=[])),
      Expr(value=Call(
        func=Attribute(
          value=Name(
            id='model',
            ctx=Load()),
          attr='fit_generator',
          ctx=Load()),
        args=[Call(
          func=Attribute(
            value=Name(
              id='datagen',
              ctx=Load()),
            attr='flow',
            ctx=Load()),
          args=[
            Name(
              id='x_train',
              ctx=Load()),
            Name(
              id='y_train',
              ctx=Load())],
          keywords=[keyword(
            arg='batch_size',
            value=Name(
              id='batch_size',
              ctx=Load()))])],
        keywords=[
          keyword(
            arg='validation_data',
            value=Tuple(
              elts=[
                Name(
                  id='x_test',
                  ctx=Load()),
                Name(
                  id='y_test',
                  ctx=Load())],
              ctx=Load())),
          keyword(
            arg='epochs',
            value=Name(
              id='epochs',
              ctx=Load())),
          keyword(
            arg='verbose',
            value=Num(n=1)),
          keyword(
            arg='workers',
            value=Num(n=4)),
          keyword(
            arg='callbacks',
            value=Name(
              id='callbacks',
              ctx=Load()))]))]),
  Assign(
    targets=[Name(
      id='scores',
      ctx=Store())],
    value=Call(
      func=Attribute(
        value=Name(
          id='model',
          ctx=Load()),
        attr='evaluate',
        ctx=Load()),
      args=[
        Name(
          id='x_test',
          ctx=Load()),
        Name(
          id='y_test',
          ctx=Load())],
      keywords=[keyword(
        arg='verbose',
        value=Num(n=1))])),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[
      Str(s='Test loss:'),
      Subscript(
        value=Name(
          id='scores',
          ctx=Load()),
        slice=Index(value=Num(n=0)),
        ctx=Load())],
    keywords=[])),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[
      Str(s='Test accuracy:'),
      Subscript(
        value=Name(
          id='scores',
          ctx=Load()),
        slice=Index(value=Num(n=1)),
        ctx=Load())],
    keywords=[]))])