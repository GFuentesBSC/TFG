Module(body=[
  ImportFrom(
    module='__future__',
    names=[alias(
      name='print_function',
      asname=None)],
    level=0),
  Import(names=[alias(
    name='tensorflow.keras',
    asname='keras')]),
  ImportFrom(
    module='tensorflow.keras.models',
    names=[alias(
      name='Sequential',
      asname=None)],
    level=0),
  ImportFrom(
    module='tensorflow.keras',
    names=[alias(
      name='layers',
      asname=None)],
    level=0),
  ImportFrom(
    module='tensorflow.keras.datasets',
    names=[alias(
      name='mnist',
      asname=None)],
    level=0),
  ImportFrom(
    module='tensorflow.keras',
    names=[alias(
      name='backend',
      asname='K')],
    level=0),
  ClassDef(
    name='Antirectifier',
    bases=[Attribute(
      value=Name(
        id='layers',
        ctx=Load()),
      attr='Layer',
      ctx=Load())],
    keywords=[],
    body=[
      Expr(value=Str(s='This is the combination of a sample-wise\n    L2 normalization with the concatenation of the\n    positive part of the input with the negative part\n    of the input. The result is a tensor of samples that are\n    twice as large as the input samples.\n    It can be used in place of a ReLU.\n    # Input shape\n        2D tensor of shape (samples, n)\n    # Output shape\n        2D tensor of shape (samples, 2*n)\n    # Theoretical justification\n        When applying ReLU, assuming that the distribution\n        of the previous output is approximately centered around 0.,\n        you are discarding half of your input. This is inefficient.\n        Antirectifier allows to return all-positive outputs like ReLU,\n        without discarding any data.\n        Tests on MNIST show that Antirectifier allows to train networks\n        with twice less parameters yet with comparable\n        classification accuracy as an equivalent ReLU-based network.\n    ')),
      FunctionDef(
        name='compute_output_shape',
        args=arguments(
          args=[
            arg(
              arg='self',
              annotation=None),
            arg(
              arg='input_shape',
              annotation=None)],
          vararg=None,
          kwonlyargs=[],
          kw_defaults=[],
          kwarg=None,
          defaults=[]),
        body=[
          Assign(
            targets=[Name(
              id='shape',
              ctx=Store())],
            value=Call(
              func=Name(
                id='list',
                ctx=Load()),
              args=[Name(
                id='input_shape',
                ctx=Load())],
              keywords=[])),
          Assert(
            test=Compare(
              left=Call(
                func=Name(
                  id='len',
                  ctx=Load()),
                args=[Name(
                  id='shape',
                  ctx=Load())],
                keywords=[]),
              ops=[Eq()],
              comparators=[Num(n=2)]),
            msg=None),
          AugAssign(
            target=Subscript(
              value=Name(
                id='shape',
                ctx=Load()),
              slice=Index(value=UnaryOp(
                op=USub(),
                operand=Num(n=1))),
              ctx=Store()),
            op=Mult(),
            value=Num(n=2)),
          Return(value=Call(
            func=Name(
              id='tuple',
              ctx=Load()),
            args=[Name(
              id='shape',
              ctx=Load())],
            keywords=[]))],
        decorator_list=[],
        returns=None),
      FunctionDef(
        name='call',
        args=arguments(
          args=[
            arg(
              arg='self',
              annotation=None),
            arg(
              arg='inputs',
              annotation=None)],
          vararg=None,
          kwonlyargs=[],
          kw_defaults=[],
          kwarg=None,
          defaults=[]),
        body=[
          AugAssign(
            target=Name(
              id='inputs',
              ctx=Store()),
            op=Sub(),
            value=Call(
              func=Attribute(
                value=Name(
                  id='K',
                  ctx=Load()),
                attr='mean',
                ctx=Load()),
              args=[Name(
                id='inputs',
                ctx=Load())],
              keywords=[
                keyword(
                  arg='axis',
                  value=Num(n=1)),
                keyword(
                  arg='keepdims',
                  value=NameConstant(value=True))])),
          Assign(
            targets=[Name(
              id='inputs',
              ctx=Store())],
            value=Call(
              func=Attribute(
                value=Name(
                  id='K',
                  ctx=Load()),
                attr='l2_normalize',
                ctx=Load()),
              args=[Name(
                id='inputs',
                ctx=Load())],
              keywords=[keyword(
                arg='axis',
                value=Num(n=1))])),
          Assign(
            targets=[Name(
              id='pos',
              ctx=Store())],
            value=Call(
              func=Attribute(
                value=Name(
                  id='K',
                  ctx=Load()),
                attr='relu',
                ctx=Load()),
              args=[Name(
                id='inputs',
                ctx=Load())],
              keywords=[])),
          Assign(
            targets=[Name(
              id='neg',
              ctx=Store())],
            value=Call(
              func=Attribute(
                value=Name(
                  id='K',
                  ctx=Load()),
                attr='relu',
                ctx=Load()),
              args=[UnaryOp(
                op=USub(),
                operand=Name(
                  id='inputs',
                  ctx=Load()))],
              keywords=[])),
          Return(value=Call(
            func=Attribute(
              value=Name(
                id='K',
                ctx=Load()),
              attr='concatenate',
              ctx=Load()),
            args=[List(
              elts=[
                Name(
                  id='pos',
                  ctx=Load()),
                Name(
                  id='neg',
                  ctx=Load())],
              ctx=Load())],
            keywords=[keyword(
              arg='axis',
              value=Num(n=1))]))],
        decorator_list=[],
        returns=None)],
    decorator_list=[]),
  Assign(
    targets=[Name(
      id='batch_size',
      ctx=Store())],
    value=Num(n=128)),
  Assign(
    targets=[Name(
      id='num_classes',
      ctx=Store())],
    value=Num(n=10)),
  Assign(
    targets=[Name(
      id='epochs',
      ctx=Store())],
    value=Num(n=40)),
  Assign(
    targets=[Tuple(
      elts=[
        Tuple(
          elts=[
            Name(
              id='x_train',
              ctx=Store()),
            Name(
              id='y_train',
              ctx=Store())],
          ctx=Store()),
        Tuple(
          elts=[
            Name(
              id='x_test',
              ctx=Store()),
            Name(
              id='y_test',
              ctx=Store())],
          ctx=Store())],
      ctx=Store())],
    value=Call(
      func=Attribute(
        value=Name(
          id='mnist',
          ctx=Load()),
        attr='load_data',
        ctx=Load()),
      args=[],
      keywords=[])),
  Assign(
    targets=[Name(
      id='x_train',
      ctx=Store())],
    value=Call(
      func=Attribute(
        value=Name(
          id='x_train',
          ctx=Load()),
        attr='reshape',
        ctx=Load()),
      args=[
        Num(n=60000),
        Num(n=784)],
      keywords=[])),
  Assign(
    targets=[Name(
      id='x_test',
      ctx=Store())],
    value=Call(
      func=Attribute(
        value=Name(
          id='x_test',
          ctx=Load()),
        attr='reshape',
        ctx=Load()),
      args=[
        Num(n=10000),
        Num(n=784)],
      keywords=[])),
  Assign(
    targets=[Name(
      id='x_train',
      ctx=Store())],
    value=Call(
      func=Attribute(
        value=Name(
          id='x_train',
          ctx=Load()),
        attr='astype',
        ctx=Load()),
      args=[Str(s='float32')],
      keywords=[])),
  Assign(
    targets=[Name(
      id='x_test',
      ctx=Store())],
    value=Call(
      func=Attribute(
        value=Name(
          id='x_test',
          ctx=Load()),
        attr='astype',
        ctx=Load()),
      args=[Str(s='float32')],
      keywords=[])),
  AugAssign(
    target=Name(
      id='x_train',
      ctx=Store()),
    op=Div(),
    value=Num(n=255)),
  AugAssign(
    target=Name(
      id='x_test',
      ctx=Store()),
    op=Div(),
    value=Num(n=255)),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[
      Subscript(
        value=Attribute(
          value=Name(
            id='x_train',
            ctx=Load()),
          attr='shape',
          ctx=Load()),
        slice=Index(value=Num(n=0)),
        ctx=Load()),
      Str(s='train samples')],
    keywords=[])),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[
      Subscript(
        value=Attribute(
          value=Name(
            id='x_test',
            ctx=Load()),
          attr='shape',
          ctx=Load()),
        slice=Index(value=Num(n=0)),
        ctx=Load()),
      Str(s='test samples')],
    keywords=[])),
  Assign(
    targets=[Name(
      id='y_train',
      ctx=Store())],
    value=Call(
      func=Attribute(
        value=Attribute(
          value=Name(
            id='keras',
            ctx=Load()),
          attr='utils',
          ctx=Load()),
        attr='to_categorical',
        ctx=Load()),
      args=[
        Name(
          id='y_train',
          ctx=Load()),
        Name(
          id='num_classes',
          ctx=Load())],
      keywords=[])),
  Assign(
    targets=[Name(
      id='y_test',
      ctx=Store())],
    value=Call(
      func=Attribute(
        value=Attribute(
          value=Name(
            id='keras',
            ctx=Load()),
          attr='utils',
          ctx=Load()),
        attr='to_categorical',
        ctx=Load()),
      args=[
        Name(
          id='y_test',
          ctx=Load()),
        Name(
          id='num_classes',
          ctx=Load())],
      keywords=[])),
  Assign(
    targets=[Name(
      id='model',
      ctx=Store())],
    value=Call(
      func=Name(
        id='Sequential',
        ctx=Load()),
      args=[],
      keywords=[])),
  Expr(value=Call(
    func=Attribute(
      value=Name(
        id='model',
        ctx=Load()),
      attr='add',
      ctx=Load()),
    args=[Call(
      func=Attribute(
        value=Name(
          id='layers',
          ctx=Load()),
        attr='Dense',
        ctx=Load()),
      args=[Num(n=256)],
      keywords=[keyword(
        arg='input_shape',
        value=Tuple(
          elts=[Num(n=784)],
          ctx=Load()))])],
    keywords=[])),
  Expr(value=Call(
    func=Attribute(
      value=Name(
        id='model',
        ctx=Load()),
      attr='add',
      ctx=Load()),
    args=[Call(
      func=Name(
        id='Antirectifier',
        ctx=Load()),
      args=[],
      keywords=[])],
    keywords=[])),
  Expr(value=Call(
    func=Attribute(
      value=Name(
        id='model',
        ctx=Load()),
      attr='add',
      ctx=Load()),
    args=[Call(
      func=Attribute(
        value=Name(
          id='layers',
          ctx=Load()),
        attr='Dropout',
        ctx=Load()),
      args=[Num(n=0.1)],
      keywords=[])],
    keywords=[])),
  Expr(value=Call(
    func=Attribute(
      value=Name(
        id='model',
        ctx=Load()),
      attr='add',
      ctx=Load()),
    args=[Call(
      func=Attribute(
        value=Name(
          id='layers',
          ctx=Load()),
        attr='Dense',
        ctx=Load()),
      args=[Num(n=256)],
      keywords=[])],
    keywords=[])),
  Expr(value=Call(
    func=Attribute(
      value=Name(
        id='model',
        ctx=Load()),
      attr='add',
      ctx=Load()),
    args=[Call(
      func=Name(
        id='Antirectifier',
        ctx=Load()),
      args=[],
      keywords=[])],
    keywords=[])),
  Expr(value=Call(
    func=Attribute(
      value=Name(
        id='model',
        ctx=Load()),
      attr='add',
      ctx=Load()),
    args=[Call(
      func=Attribute(
        value=Name(
          id='layers',
          ctx=Load()),
        attr='Dropout',
        ctx=Load()),
      args=[Num(n=0.1)],
      keywords=[])],
    keywords=[])),
  Expr(value=Call(
    func=Attribute(
      value=Name(
        id='model',
        ctx=Load()),
      attr='add',
      ctx=Load()),
    args=[Call(
      func=Attribute(
        value=Name(
          id='layers',
          ctx=Load()),
        attr='Dense',
        ctx=Load()),
      args=[Name(
        id='num_classes',
        ctx=Load())],
      keywords=[])],
    keywords=[])),
  Expr(value=Call(
    func=Attribute(
      value=Name(
        id='model',
        ctx=Load()),
      attr='add',
      ctx=Load()),
    args=[Call(
      func=Attribute(
        value=Name(
          id='layers',
          ctx=Load()),
        attr='Activation',
        ctx=Load()),
      args=[Str(s='softmax')],
      keywords=[])],
    keywords=[])),
  Expr(value=Call(
    func=Attribute(
      value=Name(
        id='model',
        ctx=Load()),
      attr='compile',
      ctx=Load()),
    args=[],
    keywords=[
      keyword(
        arg='loss',
        value=Str(s='categorical_crossentropy')),
      keyword(
        arg='optimizer',
        value=Str(s='rmsprop')),
      keyword(
        arg='metrics',
        value=List(
          elts=[Str(s='accuracy')],
          ctx=Load()))])),
  Expr(value=Call(
    func=Attribute(
      value=Name(
        id='model',
        ctx=Load()),
      attr='fit',
      ctx=Load()),
    args=[
      Name(
        id='x_train',
        ctx=Load()),
      Name(
        id='y_train',
        ctx=Load())],
    keywords=[
      keyword(
        arg='batch_size',
        value=Name(
          id='batch_size',
          ctx=Load())),
      keyword(
        arg='epochs',
        value=Name(
          id='epochs',
          ctx=Load())),
      keyword(
        arg='verbose',
        value=Num(n=1)),
      keyword(
        arg='validation_data',
        value=Tuple(
          elts=[
            Name(
              id='x_test',
              ctx=Load()),
            Name(
              id='y_test',
              ctx=Load())],
          ctx=Load()))]))])