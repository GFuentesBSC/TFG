Module(body=[
  Import(names=[alias(
    name='torch',
    asname=None)]),
  Import(names=[alias(
    name='torchvision',
    asname=None)]),
  Import(names=[alias(
    name='torchvision.transforms',
    asname='transforms')]),
  Import(names=[alias(
    name='matplotlib.pyplot',
    asname='plt')]),
  Import(names=[alias(
    name='numpy',
    asname='np')]),
  Import(names=[alias(
    name='torch.nn',
    asname='nn')]),
  Import(names=[alias(
    name='torch.nn.functional',
    asname='F')]),
  Import(names=[alias(
    name='torch.optim',
    asname='optim')]),
  ClassDef(
    name='Net',
    bases=[Attribute(
      value=Name(
        id='nn',
        ctx=Load()),
      attr='Module',
      ctx=Load())],
    keywords=[],
    body=[
      FunctionDef(
        name='__init__',
        args=arguments(
          args=[arg(
            arg='self',
            annotation=None)],
          vararg=None,
          kwonlyargs=[],
          kw_defaults=[],
          kwarg=None,
          defaults=[]),
        body=[
          Expr(value=Call(
            func=Attribute(
              value=Call(
                func=Name(
                  id='super',
                  ctx=Load()),
                args=[
                  Name(
                    id='Net',
                    ctx=Load()),
                  Name(
                    id='self',
                    ctx=Load())],
                keywords=[]),
              attr='__init__',
              ctx=Load()),
            args=[],
            keywords=[])),
          Assign(
            targets=[Attribute(
              value=Name(
                id='self',
                ctx=Load()),
              attr='conv1',
              ctx=Store())],
            value=Call(
              func=Attribute(
                value=Name(
                  id='nn',
                  ctx=Load()),
                attr='Conv2d',
                ctx=Load()),
              args=[
                Num(n=3),
                Num(n=6),
                Num(n=5)],
              keywords=[])),
          Assign(
            targets=[Attribute(
              value=Name(
                id='self',
                ctx=Load()),
              attr='pool',
              ctx=Store())],
            value=Call(
              func=Attribute(
                value=Name(
                  id='nn',
                  ctx=Load()),
                attr='MaxPool2d',
                ctx=Load()),
              args=[
                Num(n=2),
                Num(n=2)],
              keywords=[])),
          Assign(
            targets=[Attribute(
              value=Name(
                id='self',
                ctx=Load()),
              attr='conv2',
              ctx=Store())],
            value=Call(
              func=Attribute(
                value=Name(
                  id='nn',
                  ctx=Load()),
                attr='Conv2d',
                ctx=Load()),
              args=[
                Num(n=6),
                Num(n=16),
                Num(n=5)],
              keywords=[])),
          Assign(
            targets=[Attribute(
              value=Name(
                id='self',
                ctx=Load()),
              attr='fc1',
              ctx=Store())],
            value=Call(
              func=Attribute(
                value=Name(
                  id='nn',
                  ctx=Load()),
                attr='Linear',
                ctx=Load()),
              args=[
                BinOp(
                  left=BinOp(
                    left=Num(n=16),
                    op=Mult(),
                    right=Num(n=5)),
                  op=Mult(),
                  right=Num(n=5)),
                Num(n=120)],
              keywords=[])),
          Assign(
            targets=[Attribute(
              value=Name(
                id='self',
                ctx=Load()),
              attr='fc2',
              ctx=Store())],
            value=Call(
              func=Attribute(
                value=Name(
                  id='nn',
                  ctx=Load()),
                attr='Linear',
                ctx=Load()),
              args=[
                Num(n=120),
                Num(n=84)],
              keywords=[])),
          Assign(
            targets=[Attribute(
              value=Name(
                id='self',
                ctx=Load()),
              attr='fc3',
              ctx=Store())],
            value=Call(
              func=Attribute(
                value=Name(
                  id='nn',
                  ctx=Load()),
                attr='Linear',
                ctx=Load()),
              args=[
                Num(n=84),
                Num(n=10)],
              keywords=[]))],
        decorator_list=[],
        returns=None),
      FunctionDef(
        name='forward',
        args=arguments(
          args=[
            arg(
              arg='self',
              annotation=None),
            arg(
              arg='x',
              annotation=None)],
          vararg=None,
          kwonlyargs=[],
          kw_defaults=[],
          kwarg=None,
          defaults=[]),
        body=[
          Assign(
            targets=[Name(
              id='x',
              ctx=Store())],
            value=Call(
              func=Attribute(
                value=Name(
                  id='self',
                  ctx=Load()),
                attr='pool',
                ctx=Load()),
              args=[Call(
                func=Attribute(
                  value=Name(
                    id='F',
                    ctx=Load()),
                  attr='relu',
                  ctx=Load()),
                args=[Call(
                  func=Attribute(
                    value=Name(
                      id='self',
                      ctx=Load()),
                    attr='conv1',
                    ctx=Load()),
                  args=[Name(
                    id='x',
                    ctx=Load())],
                  keywords=[])],
                keywords=[])],
              keywords=[])),
          Assign(
            targets=[Name(
              id='x',
              ctx=Store())],
            value=Call(
              func=Attribute(
                value=Name(
                  id='self',
                  ctx=Load()),
                attr='pool',
                ctx=Load()),
              args=[Call(
                func=Attribute(
                  value=Name(
                    id='F',
                    ctx=Load()),
                  attr='relu',
                  ctx=Load()),
                args=[Call(
                  func=Attribute(
                    value=Name(
                      id='self',
                      ctx=Load()),
                    attr='conv2',
                    ctx=Load()),
                  args=[Name(
                    id='x',
                    ctx=Load())],
                  keywords=[])],
                keywords=[])],
              keywords=[])),
          Assign(
            targets=[Name(
              id='x',
              ctx=Store())],
            value=Call(
              func=Attribute(
                value=Name(
                  id='x',
                  ctx=Load()),
                attr='view',
                ctx=Load()),
              args=[
                UnaryOp(
                  op=USub(),
                  operand=Num(n=1)),
                BinOp(
                  left=BinOp(
                    left=Num(n=16),
                    op=Mult(),
                    right=Num(n=5)),
                  op=Mult(),
                  right=Num(n=5))],
              keywords=[])),
          Assign(
            targets=[Name(
              id='x',
              ctx=Store())],
            value=Call(
              func=Attribute(
                value=Name(
                  id='F',
                  ctx=Load()),
                attr='relu',
                ctx=Load()),
              args=[Call(
                func=Attribute(
                  value=Name(
                    id='self',
                    ctx=Load()),
                  attr='fc1',
                  ctx=Load()),
                args=[Name(
                  id='x',
                  ctx=Load())],
                keywords=[])],
              keywords=[])),
          Assign(
            targets=[Name(
              id='x',
              ctx=Store())],
            value=Call(
              func=Attribute(
                value=Name(
                  id='F',
                  ctx=Load()),
                attr='relu',
                ctx=Load()),
              args=[Call(
                func=Attribute(
                  value=Name(
                    id='self',
                    ctx=Load()),
                  attr='fc2',
                  ctx=Load()),
                args=[Name(
                  id='x',
                  ctx=Load())],
                keywords=[])],
              keywords=[])),
          Assign(
            targets=[Name(
              id='x',
              ctx=Store())],
            value=Call(
              func=Attribute(
                value=Name(
                  id='self',
                  ctx=Load()),
                attr='fc3',
                ctx=Load()),
              args=[Name(
                id='x',
                ctx=Load())],
              keywords=[])),
          Return(value=Name(
            id='x',
            ctx=Load()))],
        decorator_list=[],
        returns=None)],
    decorator_list=[]),
  Assign(
    targets=[Name(
      id='transform',
      ctx=Store())],
    value=Call(
      func=Attribute(
        value=Name(
          id='transforms',
          ctx=Load()),
        attr='Compose',
        ctx=Load()),
      args=[List(
        elts=[
          Call(
            func=Attribute(
              value=Name(
                id='transforms',
                ctx=Load()),
              attr='ToTensor',
              ctx=Load()),
            args=[],
            keywords=[]),
          Call(
            func=Attribute(
              value=Name(
                id='transforms',
                ctx=Load()),
              attr='Normalize',
              ctx=Load()),
            args=[
              Tuple(
                elts=[
                  Num(n=0.5),
                  Num(n=0.5),
                  Num(n=0.5)],
                ctx=Load()),
              Tuple(
                elts=[
                  Num(n=0.5),
                  Num(n=0.5),
                  Num(n=0.5)],
                ctx=Load())],
            keywords=[])],
        ctx=Load())],
      keywords=[])),
  Assign(
    targets=[Name(
      id='trainset',
      ctx=Store())],
    value=Call(
      func=Attribute(
        value=Attribute(
          value=Name(
            id='torchvision',
            ctx=Load()),
          attr='datasets',
          ctx=Load()),
        attr='CIFAR10',
        ctx=Load()),
      args=[],
      keywords=[
        keyword(
          arg='root',
          value=Str(s='./data')),
        keyword(
          arg='train',
          value=NameConstant(value=True)),
        keyword(
          arg='download',
          value=NameConstant(value=True)),
        keyword(
          arg='transform',
          value=Name(
            id='transform',
            ctx=Load()))])),
  Assign(
    targets=[Name(
      id='trainloader',
      ctx=Store())],
    value=Call(
      func=Attribute(
        value=Attribute(
          value=Attribute(
            value=Name(
              id='torch',
              ctx=Load()),
            attr='utils',
            ctx=Load()),
          attr='data',
          ctx=Load()),
        attr='DataLoader',
        ctx=Load()),
      args=[Name(
        id='trainset',
        ctx=Load())],
      keywords=[
        keyword(
          arg='batch_size',
          value=Num(n=4)),
        keyword(
          arg='shuffle',
          value=NameConstant(value=True)),
        keyword(
          arg='num_workers',
          value=Num(n=2))])),
  Assign(
    targets=[Name(
      id='testset',
      ctx=Store())],
    value=Call(
      func=Attribute(
        value=Attribute(
          value=Name(
            id='torchvision',
            ctx=Load()),
          attr='datasets',
          ctx=Load()),
        attr='CIFAR10',
        ctx=Load()),
      args=[],
      keywords=[
        keyword(
          arg='root',
          value=Str(s='./data')),
        keyword(
          arg='train',
          value=NameConstant(value=False)),
        keyword(
          arg='download',
          value=NameConstant(value=True)),
        keyword(
          arg='transform',
          value=Name(
            id='transform',
            ctx=Load()))])),
  Assign(
    targets=[Name(
      id='testloader',
      ctx=Store())],
    value=Call(
      func=Attribute(
        value=Attribute(
          value=Attribute(
            value=Name(
              id='torch',
              ctx=Load()),
            attr='utils',
            ctx=Load()),
          attr='data',
          ctx=Load()),
        attr='DataLoader',
        ctx=Load()),
      args=[Name(
        id='testset',
        ctx=Load())],
      keywords=[
        keyword(
          arg='batch_size',
          value=Num(n=4)),
        keyword(
          arg='shuffle',
          value=NameConstant(value=False)),
        keyword(
          arg='num_workers',
          value=Num(n=2))])),
  Assign(
    targets=[Name(
      id='classes',
      ctx=Store())],
    value=Tuple(
      elts=[
        Str(s='plane'),
        Str(s='car'),
        Str(s='bird'),
        Str(s='cat'),
        Str(s='deer'),
        Str(s='dog'),
        Str(s='frog'),
        Str(s='horse'),
        Str(s='ship'),
        Str(s='truck')],
      ctx=Load())),
  Assign(
    targets=[Name(
      id='net',
      ctx=Store())],
    value=Call(
      func=Name(
        id='Net',
        ctx=Load()),
      args=[],
      keywords=[])),
  Assign(
    targets=[Name(
      id='criterion',
      ctx=Store())],
    value=Call(
      func=Attribute(
        value=Name(
          id='nn',
          ctx=Load()),
        attr='CrossEntropyLoss',
        ctx=Load()),
      args=[],
      keywords=[])),
  Assign(
    targets=[Name(
      id='optimizer',
      ctx=Store())],
    value=Call(
      func=Attribute(
        value=Name(
          id='optim',
          ctx=Load()),
        attr='SGD',
        ctx=Load()),
      args=[Call(
        func=Attribute(
          value=Name(
            id='net',
            ctx=Load()),
          attr='parameters',
          ctx=Load()),
        args=[],
        keywords=[])],
      keywords=[
        keyword(
          arg='lr',
          value=Num(n=0.001)),
        keyword(
          arg='momentum',
          value=Num(n=0.9))])),
  For(
    target=Name(
      id='epoch',
      ctx=Store()),
    iter=Call(
      func=Name(
        id='range',
        ctx=Load()),
      args=[Num(n=2)],
      keywords=[]),
    body=[
      Assign(
        targets=[Name(
          id='running_loss',
          ctx=Store())],
        value=Num(n=0.0)),
      For(
        target=Tuple(
          elts=[
            Name(
              id='i',
              ctx=Store()),
            Name(
              id='data',
              ctx=Store())],
          ctx=Store()),
        iter=Call(
          func=Name(
            id='enumerate',
            ctx=Load()),
          args=[
            Name(
              id='trainloader',
              ctx=Load()),
            Num(n=0)],
          keywords=[]),
        body=[
          Assign(
            targets=[Tuple(
              elts=[
                Name(
                  id='inputs',
                  ctx=Store()),
                Name(
                  id='labels',
                  ctx=Store())],
              ctx=Store())],
            value=Name(
              id='data',
              ctx=Load())),
          Expr(value=Call(
            func=Attribute(
              value=Name(
                id='optimizer',
                ctx=Load()),
              attr='zero_grad',
              ctx=Load()),
            args=[],
            keywords=[])),
          Assign(
            targets=[Name(
              id='outputs',
              ctx=Store())],
            value=Call(
              func=Name(
                id='net',
                ctx=Load()),
              args=[Name(
                id='inputs',
                ctx=Load())],
              keywords=[])),
          Assign(
            targets=[Name(
              id='loss',
              ctx=Store())],
            value=Call(
              func=Name(
                id='criterion',
                ctx=Load()),
              args=[
                Name(
                  id='outputs',
                  ctx=Load()),
                Name(
                  id='labels',
                  ctx=Load())],
              keywords=[])),
          Expr(value=Call(
            func=Attribute(
              value=Name(
                id='loss',
                ctx=Load()),
              attr='backward',
              ctx=Load()),
            args=[],
            keywords=[])),
          Expr(value=Call(
            func=Attribute(
              value=Name(
                id='optimizer',
                ctx=Load()),
              attr='step',
              ctx=Load()),
            args=[],
            keywords=[])),
          AugAssign(
            target=Name(
              id='running_loss',
              ctx=Store()),
            op=Add(),
            value=Call(
              func=Attribute(
                value=Name(
                  id='loss',
                  ctx=Load()),
                attr='item',
                ctx=Load()),
              args=[],
              keywords=[])),
          If(
            test=Compare(
              left=BinOp(
                left=Name(
                  id='i',
                  ctx=Load()),
                op=Mod(),
                right=Num(n=2000)),
              ops=[Eq()],
              comparators=[Num(n=1999)]),
            body=[
              Expr(value=Call(
                func=Name(
                  id='print',
                  ctx=Load()),
                args=[BinOp(
                  left=Str(s='[%d, %5d] loss: %.3f'),
                  op=Mod(),
                  right=Tuple(
                    elts=[
                      BinOp(
                        left=Name(
                          id='epoch',
                          ctx=Load()),
                        op=Add(),
                        right=Num(n=1)),
                      BinOp(
                        left=Name(
                          id='i',
                          ctx=Load()),
                        op=Add(),
                        right=Num(n=1)),
                      BinOp(
                        left=Name(
                          id='running_loss',
                          ctx=Load()),
                        op=Div(),
                        right=Num(n=2000))],
                    ctx=Load()))],
                keywords=[])),
              Assign(
                targets=[Name(
                  id='running_loss',
                  ctx=Store())],
                value=Num(n=0.0))],
            orelse=[])],
        orelse=[])],
    orelse=[]),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[Str(s='Finished Training')],
    keywords=[])),
  Assign(
    targets=[Name(
      id='correct',
      ctx=Store())],
    value=Num(n=0)),
  Assign(
    targets=[Name(
      id='total',
      ctx=Store())],
    value=Num(n=0)),
  With(
    items=[withitem(
      context_expr=Call(
        func=Attribute(
          value=Name(
            id='torch',
            ctx=Load()),
          attr='no_grad',
          ctx=Load()),
        args=[],
        keywords=[]),
      optional_vars=None)],
    body=[For(
      target=Name(
        id='data',
        ctx=Store()),
      iter=Name(
        id='testloader',
        ctx=Load()),
      body=[
        Assign(
          targets=[Tuple(
            elts=[
              Name(
                id='images',
                ctx=Store()),
              Name(
                id='labels',
                ctx=Store())],
            ctx=Store())],
          value=Name(
            id='data',
            ctx=Load())),
        Assign(
          targets=[Name(
            id='outputs',
            ctx=Store())],
          value=Call(
            func=Name(
              id='net',
              ctx=Load()),
            args=[Name(
              id='images',
              ctx=Load())],
            keywords=[])),
        Assign(
          targets=[Tuple(
            elts=[
              Name(
                id='_',
                ctx=Store()),
              Name(
                id='predicted',
                ctx=Store())],
            ctx=Store())],
          value=Call(
            func=Attribute(
              value=Name(
                id='torch',
                ctx=Load()),
              attr='max',
              ctx=Load()),
            args=[
              Attribute(
                value=Name(
                  id='outputs',
                  ctx=Load()),
                attr='data',
                ctx=Load()),
              Num(n=1)],
            keywords=[])),
        AugAssign(
          target=Name(
            id='total',
            ctx=Store()),
          op=Add(),
          value=Call(
            func=Attribute(
              value=Name(
                id='labels',
                ctx=Load()),
              attr='size',
              ctx=Load()),
            args=[Num(n=0)],
            keywords=[])),
        AugAssign(
          target=Name(
            id='correct',
            ctx=Store()),
          op=Add(),
          value=Call(
            func=Attribute(
              value=Call(
                func=Attribute(
                  value=Compare(
                    left=Name(
                      id='predicted',
                      ctx=Load()),
                    ops=[Eq()],
                    comparators=[Name(
                      id='labels',
                      ctx=Load())]),
                  attr='sum',
                  ctx=Load()),
                args=[],
                keywords=[]),
              attr='item',
              ctx=Load()),
            args=[],
            keywords=[]))],
      orelse=[])]),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[BinOp(
      left=Str(s='Accuracy of the network on the 10000 test images: %d %%'),
      op=Mod(),
      right=BinOp(
        left=BinOp(
          left=Num(n=100),
          op=Mult(),
          right=Name(
            id='correct',
            ctx=Load())),
        op=Div(),
        right=Name(
          id='total',
          ctx=Load())))],
    keywords=[])),
  Assign(
    targets=[Name(
      id='class_correct',
      ctx=Store())],
    value=Call(
      func=Name(
        id='list',
        ctx=Load()),
      args=[GeneratorExp(
        elt=Num(n=0.0),
        generators=[comprehension(
          target=Name(
            id='i',
            ctx=Store()),
          iter=Call(
            func=Name(
              id='range',
              ctx=Load()),
            args=[Num(n=10)],
            keywords=[]),
          ifs=[],
          is_async=0)])],
      keywords=[])),
  Assign(
    targets=[Name(
      id='class_total',
      ctx=Store())],
    value=Call(
      func=Name(
        id='list',
        ctx=Load()),
      args=[GeneratorExp(
        elt=Num(n=0.0),
        generators=[comprehension(
          target=Name(
            id='i',
            ctx=Store()),
          iter=Call(
            func=Name(
              id='range',
              ctx=Load()),
            args=[Num(n=10)],
            keywords=[]),
          ifs=[],
          is_async=0)])],
      keywords=[])),
  With(
    items=[withitem(
      context_expr=Call(
        func=Attribute(
          value=Name(
            id='torch',
            ctx=Load()),
          attr='no_grad',
          ctx=Load()),
        args=[],
        keywords=[]),
      optional_vars=None)],
    body=[For(
      target=Name(
        id='data',
        ctx=Store()),
      iter=Name(
        id='testloader',
        ctx=Load()),
      body=[
        Assign(
          targets=[Tuple(
            elts=[
              Name(
                id='images',
                ctx=Store()),
              Name(
                id='labels',
                ctx=Store())],
            ctx=Store())],
          value=Name(
            id='data',
            ctx=Load())),
        Assign(
          targets=[Name(
            id='outputs',
            ctx=Store())],
          value=Call(
            func=Name(
              id='net',
              ctx=Load()),
            args=[Name(
              id='images',
              ctx=Load())],
            keywords=[])),
        Assign(
          targets=[Tuple(
            elts=[
              Name(
                id='_',
                ctx=Store()),
              Name(
                id='predicted',
                ctx=Store())],
            ctx=Store())],
          value=Call(
            func=Attribute(
              value=Name(
                id='torch',
                ctx=Load()),
              attr='max',
              ctx=Load()),
            args=[
              Name(
                id='outputs',
                ctx=Load()),
              Num(n=1)],
            keywords=[])),
        Assign(
          targets=[Name(
            id='c',
            ctx=Store())],
          value=Call(
            func=Attribute(
              value=Compare(
                left=Name(
                  id='predicted',
                  ctx=Load()),
                ops=[Eq()],
                comparators=[Name(
                  id='labels',
                  ctx=Load())]),
              attr='squeeze',
              ctx=Load()),
            args=[],
            keywords=[])),
        For(
          target=Name(
            id='i',
            ctx=Store()),
          iter=Call(
            func=Name(
              id='range',
              ctx=Load()),
            args=[Num(n=4)],
            keywords=[]),
          body=[
            Assign(
              targets=[Name(
                id='label',
                ctx=Store())],
              value=Subscript(
                value=Name(
                  id='labels',
                  ctx=Load()),
                slice=Index(value=Name(
                  id='i',
                  ctx=Load())),
                ctx=Load())),
            AugAssign(
              target=Subscript(
                value=Name(
                  id='class_correct',
                  ctx=Load()),
                slice=Index(value=Name(
                  id='label',
                  ctx=Load())),
                ctx=Store()),
              op=Add(),
              value=Call(
                func=Attribute(
                  value=Subscript(
                    value=Name(
                      id='c',
                      ctx=Load()),
                    slice=Index(value=Name(
                      id='i',
                      ctx=Load())),
                    ctx=Load()),
                  attr='item',
                  ctx=Load()),
                args=[],
                keywords=[])),
            AugAssign(
              target=Subscript(
                value=Name(
                  id='class_total',
                  ctx=Load()),
                slice=Index(value=Name(
                  id='label',
                  ctx=Load())),
                ctx=Store()),
              op=Add(),
              value=Num(n=1))],
          orelse=[])],
      orelse=[])]),
  For(
    target=Name(
      id='i',
      ctx=Store()),
    iter=Call(
      func=Name(
        id='range',
        ctx=Load()),
      args=[Num(n=10)],
      keywords=[]),
    body=[Expr(value=Call(
      func=Name(
        id='print',
        ctx=Load()),
      args=[BinOp(
        left=Str(s='Accuracy of %5s : %2d %%'),
        op=Mod(),
        right=Tuple(
          elts=[
            Subscript(
              value=Name(
                id='classes',
                ctx=Load()),
              slice=Index(value=Name(
                id='i',
                ctx=Load())),
              ctx=Load()),
            BinOp(
              left=BinOp(
                left=Num(n=100),
                op=Mult(),
                right=Subscript(
                  value=Name(
                    id='class_correct',
                    ctx=Load()),
                  slice=Index(value=Name(
                    id='i',
                    ctx=Load())),
                  ctx=Load())),
              op=Div(),
              right=Subscript(
                value=Name(
                  id='class_total',
                  ctx=Load()),
                slice=Index(value=Name(
                  id='i',
                  ctx=Load())),
                ctx=Load()))],
          ctx=Load()))],
      keywords=[]))],
    orelse=[])])