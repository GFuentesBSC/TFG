Module(body=[
  Import(names=[alias(
    name='numpy',
    asname='np')]),
  Import(names=[alias(
    name='torch',
    asname=None)]),
  Import(names=[alias(
    name='torch.optim',
    asname='optim')]),
  Import(names=[alias(
    name='torch.nn',
    asname='nn')]),
  ImportFrom(
    module='torchviz',
    names=[alias(
      name='make_dot',
      asname=None)],
    level=0),
  ImportFrom(
    module='torch.utils.data',
    names=[
      alias(
        name='Dataset',
        asname=None),
      alias(
        name='TensorDataset',
        asname=None),
      alias(
        name='DataLoader',
        asname=None)],
    level=0),
  ImportFrom(
    module='torch.utils.data.dataset',
    names=[alias(
      name='random_split',
      asname=None)],
    level=0),
  Assign(
    targets=[Name(
      id='device',
      ctx=Store())],
    value=IfExp(
      test=Call(
        func=Attribute(
          value=Attribute(
            value=Name(
              id='torch',
              ctx=Load()),
            attr='cuda',
            ctx=Load()),
          attr='is_available',
          ctx=Load()),
        args=[],
        keywords=[]),
      body=Str(s='cuda'),
      orelse=Str(s='cpu'))),
  Expr(value=Call(
    func=Attribute(
      value=Attribute(
        value=Name(
          id='np',
          ctx=Load()),
        attr='random',
        ctx=Load()),
      attr='seed',
      ctx=Load()),
    args=[Num(n=42)],
    keywords=[])),
  Assign(
    targets=[Name(
      id='x',
      ctx=Store())],
    value=Call(
      func=Attribute(
        value=Attribute(
          value=Name(
            id='np',
            ctx=Load()),
          attr='random',
          ctx=Load()),
        attr='rand',
        ctx=Load()),
      args=[
        Num(n=100),
        Num(n=1)],
      keywords=[])),
  Assign(
    targets=[Tuple(
      elts=[
        Name(
          id='true_a',
          ctx=Store()),
        Name(
          id='true_b',
          ctx=Store())],
      ctx=Store())],
    value=Tuple(
      elts=[
        Num(n=1),
        Num(n=2)],
      ctx=Load())),
  Assign(
    targets=[Name(
      id='y',
      ctx=Store())],
    value=BinOp(
      left=BinOp(
        left=Name(
          id='true_a',
          ctx=Load()),
        op=Add(),
        right=BinOp(
          left=Name(
            id='true_b',
            ctx=Load()),
          op=Mult(),
          right=Name(
            id='x',
            ctx=Load()))),
      op=Add(),
      right=BinOp(
        left=Num(n=0.1),
        op=Mult(),
        right=Call(
          func=Attribute(
            value=Attribute(
              value=Name(
                id='np',
                ctx=Load()),
              attr='random',
              ctx=Load()),
            attr='randn',
            ctx=Load()),
          args=[
            Num(n=100),
            Num(n=1)],
          keywords=[])))),
  Assign(
    targets=[Name(
      id='x_tensor',
      ctx=Store())],
    value=Call(
      func=Attribute(
        value=Call(
          func=Attribute(
            value=Name(
              id='torch',
              ctx=Load()),
            attr='from_numpy',
            ctx=Load()),
          args=[Name(
            id='x',
            ctx=Load())],
          keywords=[]),
        attr='float',
        ctx=Load()),
      args=[],
      keywords=[])),
  Assign(
    targets=[Name(
      id='y_tensor',
      ctx=Store())],
    value=Call(
      func=Attribute(
        value=Call(
          func=Attribute(
            value=Name(
              id='torch',
              ctx=Load()),
            attr='from_numpy',
            ctx=Load()),
          args=[Name(
            id='y',
            ctx=Load())],
          keywords=[]),
        attr='float',
        ctx=Load()),
      args=[],
      keywords=[])),
  ClassDef(
    name='CustomDataset',
    bases=[Name(
      id='Dataset',
      ctx=Load())],
    keywords=[],
    body=[
      FunctionDef(
        name='__init__',
        args=arguments(
          args=[
            arg(
              arg='self',
              annotation=None),
            arg(
              arg='x_tensor',
              annotation=None),
            arg(
              arg='y_tensor',
              annotation=None)],
          vararg=None,
          kwonlyargs=[],
          kw_defaults=[],
          kwarg=None,
          defaults=[]),
        body=[
          Assign(
            targets=[Attribute(
              value=Name(
                id='self',
                ctx=Load()),
              attr='x',
              ctx=Store())],
            value=Name(
              id='x_tensor',
              ctx=Load())),
          Assign(
            targets=[Attribute(
              value=Name(
                id='self',
                ctx=Load()),
              attr='y',
              ctx=Store())],
            value=Name(
              id='y_tensor',
              ctx=Load()))],
        decorator_list=[],
        returns=None),
      FunctionDef(
        name='__getitem__',
        args=arguments(
          args=[
            arg(
              arg='self',
              annotation=None),
            arg(
              arg='index',
              annotation=None)],
          vararg=None,
          kwonlyargs=[],
          kw_defaults=[],
          kwarg=None,
          defaults=[]),
        body=[Return(value=Tuple(
          elts=[
            Subscript(
              value=Attribute(
                value=Name(
                  id='self',
                  ctx=Load()),
                attr='x',
                ctx=Load()),
              slice=Index(value=Name(
                id='index',
                ctx=Load())),
              ctx=Load()),
            Subscript(
              value=Attribute(
                value=Name(
                  id='self',
                  ctx=Load()),
                attr='y',
                ctx=Load()),
              slice=Index(value=Name(
                id='index',
                ctx=Load())),
              ctx=Load())],
          ctx=Load()))],
        decorator_list=[],
        returns=None),
      FunctionDef(
        name='__len__',
        args=arguments(
          args=[arg(
            arg='self',
            annotation=None)],
          vararg=None,
          kwonlyargs=[],
          kw_defaults=[],
          kwarg=None,
          defaults=[]),
        body=[Return(value=Call(
          func=Name(
            id='len',
            ctx=Load()),
          args=[Attribute(
            value=Name(
              id='self',
              ctx=Load()),
            attr='x',
            ctx=Load())],
          keywords=[]))],
        decorator_list=[],
        returns=None)],
    decorator_list=[]),
  Assign(
    targets=[Name(
      id='dataset',
      ctx=Store())],
    value=Call(
      func=Name(
        id='TensorDataset',
        ctx=Load()),
      args=[
        Name(
          id='x_tensor',
          ctx=Load()),
        Name(
          id='y_tensor',
          ctx=Load())],
      keywords=[])),
  Assign(
    targets=[Tuple(
      elts=[
        Name(
          id='train_dataset',
          ctx=Store()),
        Name(
          id='val_dataset',
          ctx=Store())],
      ctx=Store())],
    value=Call(
      func=Name(
        id='random_split',
        ctx=Load()),
      args=[
        Name(
          id='dataset',
          ctx=Load()),
        List(
          elts=[
            Num(n=80),
            Num(n=20)],
          ctx=Load())],
      keywords=[])),
  Assign(
    targets=[Name(
      id='train_loader',
      ctx=Store())],
    value=Call(
      func=Name(
        id='DataLoader',
        ctx=Load()),
      args=[],
      keywords=[
        keyword(
          arg='dataset',
          value=Name(
            id='train_dataset',
            ctx=Load())),
        keyword(
          arg='batch_size',
          value=Num(n=16))])),
  Assign(
    targets=[Name(
      id='val_loader',
      ctx=Store())],
    value=Call(
      func=Name(
        id='DataLoader',
        ctx=Load()),
      args=[],
      keywords=[
        keyword(
          arg='dataset',
          value=Name(
            id='val_dataset',
            ctx=Load())),
        keyword(
          arg='batch_size',
          value=Num(n=20))])),
  ClassDef(
    name='ManualLinearRegression',
    bases=[Attribute(
      value=Name(
        id='nn',
        ctx=Load()),
      attr='Module',
      ctx=Load())],
    keywords=[],
    body=[
      FunctionDef(
        name='__init__',
        args=arguments(
          args=[arg(
            arg='self',
            annotation=None)],
          vararg=None,
          kwonlyargs=[],
          kw_defaults=[],
          kwarg=None,
          defaults=[]),
        body=[
          Expr(value=Call(
            func=Attribute(
              value=Call(
                func=Name(
                  id='super',
                  ctx=Load()),
                args=[],
                keywords=[]),
              attr='__init__',
              ctx=Load()),
            args=[],
            keywords=[])),
          Assign(
            targets=[Attribute(
              value=Name(
                id='self',
                ctx=Load()),
              attr='linear',
              ctx=Store())],
            value=Call(
              func=Attribute(
                value=Name(
                  id='nn',
                  ctx=Load()),
                attr='Linear',
                ctx=Load()),
              args=[
                Num(n=1),
                Num(n=1)],
              keywords=[]))],
        decorator_list=[],
        returns=None),
      FunctionDef(
        name='forward',
        args=arguments(
          args=[
            arg(
              arg='self',
              annotation=None),
            arg(
              arg='x',
              annotation=None)],
          vararg=None,
          kwonlyargs=[],
          kw_defaults=[],
          kwarg=None,
          defaults=[]),
        body=[Return(value=Call(
          func=Attribute(
            value=Name(
              id='self',
              ctx=Load()),
            attr='linear',
            ctx=Load()),
          args=[Name(
            id='x',
            ctx=Load())],
          keywords=[]))],
        decorator_list=[],
        returns=None)],
    decorator_list=[]),
  FunctionDef(
    name='make_train_step',
    args=arguments(
      args=[
        arg(
          arg='model',
          annotation=None),
        arg(
          arg='loss_fn',
          annotation=None),
        arg(
          arg='optimizer',
          annotation=None)],
      vararg=None,
      kwonlyargs=[],
      kw_defaults=[],
      kwarg=None,
      defaults=[]),
    body=[
      FunctionDef(
        name='train_step',
        args=arguments(
          args=[
            arg(
              arg='x',
              annotation=None),
            arg(
              arg='y',
              annotation=None)],
          vararg=None,
          kwonlyargs=[],
          kw_defaults=[],
          kwarg=None,
          defaults=[]),
        body=[
          Expr(value=Call(
            func=Attribute(
              value=Name(
                id='model',
                ctx=Load()),
              attr='train',
              ctx=Load()),
            args=[],
            keywords=[])),
          Assign(
            targets=[Name(
              id='yhat',
              ctx=Store())],
            value=Call(
              func=Name(
                id='model',
                ctx=Load()),
              args=[Name(
                id='x',
                ctx=Load())],
              keywords=[])),
          Assign(
            targets=[Name(
              id='loss',
              ctx=Store())],
            value=Call(
              func=Name(
                id='loss_fn',
                ctx=Load()),
              args=[
                Name(
                  id='y',
                  ctx=Load()),
                Name(
                  id='yhat',
                  ctx=Load())],
              keywords=[])),
          Expr(value=Call(
            func=Attribute(
              value=Name(
                id='loss',
                ctx=Load()),
              attr='backward',
              ctx=Load()),
            args=[],
            keywords=[])),
          Expr(value=Call(
            func=Attribute(
              value=Name(
                id='optimizer',
                ctx=Load()),
              attr='step',
              ctx=Load()),
            args=[],
            keywords=[])),
          Expr(value=Call(
            func=Attribute(
              value=Name(
                id='optimizer',
                ctx=Load()),
              attr='zero_grad',
              ctx=Load()),
            args=[],
            keywords=[])),
          Return(value=Call(
            func=Attribute(
              value=Name(
                id='loss',
                ctx=Load()),
              attr='item',
              ctx=Load()),
            args=[],
            keywords=[]))],
        decorator_list=[],
        returns=None),
      Return(value=Name(
        id='train_step',
        ctx=Load()))],
    decorator_list=[],
    returns=None),
  Expr(value=Call(
    func=Attribute(
      value=Name(
        id='torch',
        ctx=Load()),
      attr='manual_seed',
      ctx=Load()),
    args=[Num(n=42)],
    keywords=[])),
  Assign(
    targets=[Name(
      id='model',
      ctx=Store())],
    value=Call(
      func=Attribute(
        value=Call(
          func=Name(
            id='ManualLinearRegression',
            ctx=Load()),
          args=[],
          keywords=[]),
        attr='to',
        ctx=Load()),
      args=[Name(
        id='device',
        ctx=Load())],
      keywords=[])),
  Assign(
    targets=[Name(
      id='loss_fn',
      ctx=Store())],
    value=Call(
      func=Attribute(
        value=Name(
          id='nn',
          ctx=Load()),
        attr='MSELoss',
        ctx=Load()),
      args=[],
      keywords=[keyword(
        arg='reduction',
        value=Str(s='mean'))])),
  Assign(
    targets=[Name(
      id='optimizer',
      ctx=Store())],
    value=Call(
      func=Attribute(
        value=Name(
          id='optim',
          ctx=Load()),
        attr='SGD',
        ctx=Load()),
      args=[Call(
        func=Attribute(
          value=Name(
            id='model',
            ctx=Load()),
          attr='parameters',
          ctx=Load()),
        args=[],
        keywords=[])],
      keywords=[keyword(
        arg='lr',
        value=Num(n=0.1))])),
  Assign(
    targets=[Name(
      id='train_step',
      ctx=Store())],
    value=Call(
      func=Name(
        id='make_train_step',
        ctx=Load()),
      args=[
        Name(
          id='model',
          ctx=Load()),
        Name(
          id='loss_fn',
          ctx=Load()),
        Name(
          id='optimizer',
          ctx=Load())],
      keywords=[])),
  Assign(
    targets=[Name(
      id='n_epochs',
      ctx=Store())],
    value=Num(n=100)),
  Assign(
    targets=[Name(
      id='training_losses',
      ctx=Store())],
    value=List(
      elts=[],
      ctx=Load())),
  Assign(
    targets=[Name(
      id='validation_losses',
      ctx=Store())],
    value=List(
      elts=[],
      ctx=Load())),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[Call(
      func=Attribute(
        value=Name(
          id='model',
          ctx=Load()),
        attr='state_dict',
        ctx=Load()),
      args=[],
      keywords=[])],
    keywords=[])),
  For(
    target=Name(
      id='epoch',
      ctx=Store()),
    iter=Call(
      func=Name(
        id='range',
        ctx=Load()),
      args=[Name(
        id='n_epochs',
        ctx=Load())],
      keywords=[]),
    body=[
      Assign(
        targets=[Name(
          id='batch_losses',
          ctx=Store())],
        value=List(
          elts=[],
          ctx=Load())),
      For(
        target=Tuple(
          elts=[
            Name(
              id='x_batch',
              ctx=Store()),
            Name(
              id='y_batch',
              ctx=Store())],
          ctx=Store()),
        iter=Name(
          id='train_loader',
          ctx=Load()),
        body=[
          Assign(
            targets=[Name(
              id='x_batch',
              ctx=Store())],
            value=Call(
              func=Attribute(
                value=Name(
                  id='x_batch',
                  ctx=Load()),
                attr='to',
                ctx=Load()),
              args=[Name(
                id='device',
                ctx=Load())],
              keywords=[])),
          Assign(
            targets=[Name(
              id='y_batch',
              ctx=Store())],
            value=Call(
              func=Attribute(
                value=Name(
                  id='y_batch',
                  ctx=Load()),
                attr='to',
                ctx=Load()),
              args=[Name(
                id='device',
                ctx=Load())],
              keywords=[])),
          Assign(
            targets=[Name(
              id='loss',
              ctx=Store())],
            value=Call(
              func=Name(
                id='train_step',
                ctx=Load()),
              args=[
                Name(
                  id='x_batch',
                  ctx=Load()),
                Name(
                  id='y_batch',
                  ctx=Load())],
              keywords=[])),
          Expr(value=Call(
            func=Attribute(
              value=Name(
                id='batch_losses',
                ctx=Load()),
              attr='append',
              ctx=Load()),
            args=[Name(
              id='loss',
              ctx=Load())],
            keywords=[]))],
        orelse=[]),
      Assign(
        targets=[Name(
          id='training_loss',
          ctx=Store())],
        value=Call(
          func=Attribute(
            value=Name(
              id='np',
              ctx=Load()),
            attr='mean',
            ctx=Load()),
          args=[Name(
            id='batch_losses',
            ctx=Load())],
          keywords=[])),
      Expr(value=Call(
        func=Attribute(
          value=Name(
            id='training_losses',
            ctx=Load()),
          attr='append',
          ctx=Load()),
        args=[Name(
          id='training_loss',
          ctx=Load())],
        keywords=[])),
      With(
        items=[withitem(
          context_expr=Call(
            func=Attribute(
              value=Name(
                id='torch',
                ctx=Load()),
              attr='no_grad',
              ctx=Load()),
            args=[],
            keywords=[]),
          optional_vars=None)],
        body=[
          Assign(
            targets=[Name(
              id='val_losses',
              ctx=Store())],
            value=List(
              elts=[],
              ctx=Load())),
          For(
            target=Tuple(
              elts=[
                Name(
                  id='x_val',
                  ctx=Store()),
                Name(
                  id='y_val',
                  ctx=Store())],
              ctx=Store()),
            iter=Name(
              id='val_loader',
              ctx=Load()),
            body=[
              Assign(
                targets=[Name(
                  id='x_val',
                  ctx=Store())],
                value=Call(
                  func=Attribute(
                    value=Name(
                      id='x_val',
                      ctx=Load()),
                    attr='to',
                    ctx=Load()),
                  args=[Name(
                    id='device',
                    ctx=Load())],
                  keywords=[])),
              Assign(
                targets=[Name(
                  id='y_val',
                  ctx=Store())],
                value=Call(
                  func=Attribute(
                    value=Name(
                      id='y_val',
                      ctx=Load()),
                    attr='to',
                    ctx=Load()),
                  args=[Name(
                    id='device',
                    ctx=Load())],
                  keywords=[])),
              Expr(value=Call(
                func=Attribute(
                  value=Name(
                    id='model',
                    ctx=Load()),
                  attr='eval',
                  ctx=Load()),
                args=[],
                keywords=[])),
              Assign(
                targets=[Name(
                  id='yhat',
                  ctx=Store())],
                value=Call(
                  func=Name(
                    id='model',
                    ctx=Load()),
                  args=[Name(
                    id='x_val',
                    ctx=Load())],
                  keywords=[])),
              Assign(
                targets=[Name(
                  id='val_loss',
                  ctx=Store())],
                value=Call(
                  func=Attribute(
                    value=Call(
                      func=Name(
                        id='loss_fn',
                        ctx=Load()),
                      args=[
                        Name(
                          id='y_val',
                          ctx=Load()),
                        Name(
                          id='yhat',
                          ctx=Load())],
                      keywords=[]),
                    attr='item',
                    ctx=Load()),
                  args=[],
                  keywords=[])),
              Expr(value=Call(
                func=Attribute(
                  value=Name(
                    id='val_losses',
                    ctx=Load()),
                  attr='append',
                  ctx=Load()),
                args=[Name(
                  id='val_loss',
                  ctx=Load())],
                keywords=[]))],
            orelse=[]),
          Assign(
            targets=[Name(
              id='validation_loss',
              ctx=Store())],
            value=Call(
              func=Attribute(
                value=Name(
                  id='np',
                  ctx=Load()),
                attr='mean',
                ctx=Load()),
              args=[Name(
                id='val_losses',
                ctx=Load())],
              keywords=[])),
          Expr(value=Call(
            func=Attribute(
              value=Name(
                id='validation_losses',
                ctx=Load()),
              attr='append',
              ctx=Load()),
            args=[Name(
              id='validation_loss',
              ctx=Load())],
            keywords=[]))]),
      Expr(value=Call(
        func=Name(
          id='print',
          ctx=Load()),
        args=[JoinedStr(values=[
          Str(s='['),
          FormattedValue(
            value=BinOp(
              left=Name(
                id='epoch',
                ctx=Load()),
              op=Add(),
              right=Num(n=1)),
            conversion=-1,
            format_spec=None),
          Str(s='] Training loss: '),
          FormattedValue(
            value=Name(
              id='training_loss',
              ctx=Load()),
            conversion=-1,
            format_spec=JoinedStr(values=[Str(s='.3f')])),
          Str(s='\t Validation loss: '),
          FormattedValue(
            value=Name(
              id='validation_loss',
              ctx=Load()),
            conversion=-1,
            format_spec=JoinedStr(values=[Str(s='.3f')]))])],
        keywords=[]))],
    orelse=[]),
  Expr(value=Call(
    func=Name(
      id='print',
      ctx=Load()),
    args=[Call(
      func=Attribute(
        value=Name(
          id='model',
          ctx=Load()),
        attr='state_dict',
        ctx=Load()),
      args=[],
      keywords=[])],
    keywords=[]))])